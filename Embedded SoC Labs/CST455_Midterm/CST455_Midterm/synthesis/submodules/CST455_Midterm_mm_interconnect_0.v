// CST455_Midterm_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 22.1 922

`timescale 1 ps / 1 ps
module CST455_Midterm_mm_interconnect_0 (
		input  wire        CLOCKS_sys_clk_clk,                               //                             CLOCKS_sys_clk.clk
		input  wire        CST455_Midterm_reset_reset_bridge_in_reset_reset, // CST455_Midterm_reset_reset_bridge_in_reset.reset
		input  wire [27:0] CST455_Midterm_data_master_address,               //                 CST455_Midterm_data_master.address
		output wire        CST455_Midterm_data_master_waitrequest,           //                                           .waitrequest
		input  wire [3:0]  CST455_Midterm_data_master_byteenable,            //                                           .byteenable
		input  wire        CST455_Midterm_data_master_read,                  //                                           .read
		output wire [31:0] CST455_Midterm_data_master_readdata,              //                                           .readdata
		input  wire        CST455_Midterm_data_master_write,                 //                                           .write
		input  wire [31:0] CST455_Midterm_data_master_writedata,             //                                           .writedata
		input  wire        CST455_Midterm_data_master_debugaccess,           //                                           .debugaccess
		input  wire [27:0] CST455_Midterm_instruction_master_address,        //          CST455_Midterm_instruction_master.address
		output wire        CST455_Midterm_instruction_master_waitrequest,    //                                           .waitrequest
		input  wire        CST455_Midterm_instruction_master_read,           //                                           .read
		output wire [31:0] CST455_Midterm_instruction_master_readdata,       //                                           .readdata
		output wire [8:0]  CST455_Midterm_debug_mem_slave_address,           //             CST455_Midterm_debug_mem_slave.address
		output wire        CST455_Midterm_debug_mem_slave_write,             //                                           .write
		output wire        CST455_Midterm_debug_mem_slave_read,              //                                           .read
		input  wire [31:0] CST455_Midterm_debug_mem_slave_readdata,          //                                           .readdata
		output wire [31:0] CST455_Midterm_debug_mem_slave_writedata,         //                                           .writedata
		output wire [3:0]  CST455_Midterm_debug_mem_slave_byteenable,        //                                           .byteenable
		input  wire        CST455_Midterm_debug_mem_slave_waitrequest,       //                                           .waitrequest
		output wire        CST455_Midterm_debug_mem_slave_debugaccess,       //                                           .debugaccess
		output wire [0:0]  DEBUG_avalon_jtag_slave_address,                  //                    DEBUG_avalon_jtag_slave.address
		output wire        DEBUG_avalon_jtag_slave_write,                    //                                           .write
		output wire        DEBUG_avalon_jtag_slave_read,                     //                                           .read
		input  wire [31:0] DEBUG_avalon_jtag_slave_readdata,                 //                                           .readdata
		output wire [31:0] DEBUG_avalon_jtag_slave_writedata,                //                                           .writedata
		input  wire        DEBUG_avalon_jtag_slave_waitrequest,              //                                           .waitrequest
		output wire        DEBUG_avalon_jtag_slave_chipselect,               //                                           .chipselect
		output wire [1:0]  LEDs_0_avalon_slave_0_address,                    //                      LEDs_0_avalon_slave_0.address
		output wire        LEDs_0_avalon_slave_0_write,                      //                                           .write
		output wire        LEDs_0_avalon_slave_0_read,                       //                                           .read
		input  wire [31:0] LEDs_0_avalon_slave_0_readdata,                   //                                           .readdata
		output wire [31:0] LEDs_0_avalon_slave_0_writedata,                  //                                           .writedata
		output wire        LEDs_0_avalon_slave_0_chipselect,                 //                                           .chipselect
		output wire [1:0]  Pushbuttons_0_avalon_slave_0_address,             //               Pushbuttons_0_avalon_slave_0.address
		output wire        Pushbuttons_0_avalon_slave_0_read,                //                                           .read
		input  wire [31:0] Pushbuttons_0_avalon_slave_0_readdata,            //                                           .readdata
		output wire        Pushbuttons_0_avalon_slave_0_chipselect,          //                                           .chipselect
		output wire [24:0] SDRAM_s1_address,                                 //                                   SDRAM_s1.address
		output wire        SDRAM_s1_write,                                   //                                           .write
		output wire        SDRAM_s1_read,                                    //                                           .read
		input  wire [15:0] SDRAM_s1_readdata,                                //                                           .readdata
		output wire [15:0] SDRAM_s1_writedata,                               //                                           .writedata
		output wire [1:0]  SDRAM_s1_byteenable,                              //                                           .byteenable
		input  wire        SDRAM_s1_readdatavalid,                           //                                           .readdatavalid
		input  wire        SDRAM_s1_waitrequest,                             //                                           .waitrequest
		output wire        SDRAM_s1_chipselect,                              //                                           .chipselect
		output wire [1:0]  SevenSegDecoder_0_avalon_slave_0_address,         //           SevenSegDecoder_0_avalon_slave_0.address
		output wire        SevenSegDecoder_0_avalon_slave_0_write,           //                                           .write
		input  wire [31:0] SevenSegDecoder_0_avalon_slave_0_readdata,        //                                           .readdata
		output wire [31:0] SevenSegDecoder_0_avalon_slave_0_writedata,       //                                           .writedata
		output wire        SevenSegDecoder_0_avalon_slave_0_chipselect,      //                                           .chipselect
		output wire [1:0]  SevenSegDecoder_1_avalon_slave_0_address,         //           SevenSegDecoder_1_avalon_slave_0.address
		output wire        SevenSegDecoder_1_avalon_slave_0_write,           //                                           .write
		input  wire [31:0] SevenSegDecoder_1_avalon_slave_0_readdata,        //                                           .readdata
		output wire [31:0] SevenSegDecoder_1_avalon_slave_0_writedata,       //                                           .writedata
		output wire        SevenSegDecoder_1_avalon_slave_0_chipselect,      //                                           .chipselect
		output wire [1:0]  SevenSegDecoder_2_avalon_slave_0_address,         //           SevenSegDecoder_2_avalon_slave_0.address
		output wire        SevenSegDecoder_2_avalon_slave_0_write,           //                                           .write
		input  wire [31:0] SevenSegDecoder_2_avalon_slave_0_readdata,        //                                           .readdata
		output wire [31:0] SevenSegDecoder_2_avalon_slave_0_writedata,       //                                           .writedata
		output wire        SevenSegDecoder_2_avalon_slave_0_chipselect,      //                                           .chipselect
		output wire [1:0]  SevenSegDecoder_3_avalon_slave_0_address,         //           SevenSegDecoder_3_avalon_slave_0.address
		output wire        SevenSegDecoder_3_avalon_slave_0_write,           //                                           .write
		input  wire [31:0] SevenSegDecoder_3_avalon_slave_0_readdata,        //                                           .readdata
		output wire [31:0] SevenSegDecoder_3_avalon_slave_0_writedata,       //                                           .writedata
		output wire        SevenSegDecoder_3_avalon_slave_0_chipselect,      //                                           .chipselect
		output wire [1:0]  SevenSegDecoder_4_avalon_slave_0_address,         //           SevenSegDecoder_4_avalon_slave_0.address
		output wire        SevenSegDecoder_4_avalon_slave_0_write,           //                                           .write
		input  wire [31:0] SevenSegDecoder_4_avalon_slave_0_readdata,        //                                           .readdata
		output wire [31:0] SevenSegDecoder_4_avalon_slave_0_writedata,       //                                           .writedata
		output wire        SevenSegDecoder_4_avalon_slave_0_chipselect,      //                                           .chipselect
		output wire [1:0]  SevenSegDecoder_5_avalon_slave_0_address,         //           SevenSegDecoder_5_avalon_slave_0.address
		output wire        SevenSegDecoder_5_avalon_slave_0_write,           //                                           .write
		input  wire [31:0] SevenSegDecoder_5_avalon_slave_0_readdata,        //                                           .readdata
		output wire [31:0] SevenSegDecoder_5_avalon_slave_0_writedata,       //                                           .writedata
		output wire        SevenSegDecoder_5_avalon_slave_0_chipselect,      //                                           .chipselect
		output wire [1:0]  Switches_0_avalon_slave_0_address,                //                  Switches_0_avalon_slave_0.address
		output wire        Switches_0_avalon_slave_0_read,                   //                                           .read
		input  wire [31:0] Switches_0_avalon_slave_0_readdata,               //                                           .readdata
		output wire        Switches_0_avalon_slave_0_chipselect,             //                                           .chipselect
		output wire [2:0]  sys_clk_s1_address,                               //                                 sys_clk_s1.address
		output wire        sys_clk_s1_write,                                 //                                           .write
		input  wire [15:0] sys_clk_s1_readdata,                              //                                           .readdata
		output wire [15:0] sys_clk_s1_writedata,                             //                                           .writedata
		output wire        sys_clk_s1_chipselect                             //                                           .chipselect
	);

	wire          cst455_midterm_data_master_translator_avalon_universal_master_0_waitrequest;          // CST455_Midterm_data_master_agent:av_waitrequest -> CST455_Midterm_data_master_translator:uav_waitrequest
	wire   [31:0] cst455_midterm_data_master_translator_avalon_universal_master_0_readdata;             // CST455_Midterm_data_master_agent:av_readdata -> CST455_Midterm_data_master_translator:uav_readdata
	wire          cst455_midterm_data_master_translator_avalon_universal_master_0_debugaccess;          // CST455_Midterm_data_master_translator:uav_debugaccess -> CST455_Midterm_data_master_agent:av_debugaccess
	wire   [27:0] cst455_midterm_data_master_translator_avalon_universal_master_0_address;              // CST455_Midterm_data_master_translator:uav_address -> CST455_Midterm_data_master_agent:av_address
	wire          cst455_midterm_data_master_translator_avalon_universal_master_0_read;                 // CST455_Midterm_data_master_translator:uav_read -> CST455_Midterm_data_master_agent:av_read
	wire    [3:0] cst455_midterm_data_master_translator_avalon_universal_master_0_byteenable;           // CST455_Midterm_data_master_translator:uav_byteenable -> CST455_Midterm_data_master_agent:av_byteenable
	wire          cst455_midterm_data_master_translator_avalon_universal_master_0_readdatavalid;        // CST455_Midterm_data_master_agent:av_readdatavalid -> CST455_Midterm_data_master_translator:uav_readdatavalid
	wire          cst455_midterm_data_master_translator_avalon_universal_master_0_lock;                 // CST455_Midterm_data_master_translator:uav_lock -> CST455_Midterm_data_master_agent:av_lock
	wire          cst455_midterm_data_master_translator_avalon_universal_master_0_write;                // CST455_Midterm_data_master_translator:uav_write -> CST455_Midterm_data_master_agent:av_write
	wire   [31:0] cst455_midterm_data_master_translator_avalon_universal_master_0_writedata;            // CST455_Midterm_data_master_translator:uav_writedata -> CST455_Midterm_data_master_agent:av_writedata
	wire    [2:0] cst455_midterm_data_master_translator_avalon_universal_master_0_burstcount;           // CST455_Midterm_data_master_translator:uav_burstcount -> CST455_Midterm_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                    // rsp_mux:src_valid -> CST455_Midterm_data_master_agent:rp_valid
	wire  [105:0] rsp_mux_src_data;                                                                     // rsp_mux:src_data -> CST455_Midterm_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                    // CST455_Midterm_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [12:0] rsp_mux_src_channel;                                                                  // rsp_mux:src_channel -> CST455_Midterm_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                            // rsp_mux:src_startofpacket -> CST455_Midterm_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                              // rsp_mux:src_endofpacket -> CST455_Midterm_data_master_agent:rp_endofpacket
	wire          cst455_midterm_instruction_master_translator_avalon_universal_master_0_waitrequest;   // CST455_Midterm_instruction_master_agent:av_waitrequest -> CST455_Midterm_instruction_master_translator:uav_waitrequest
	wire   [31:0] cst455_midterm_instruction_master_translator_avalon_universal_master_0_readdata;      // CST455_Midterm_instruction_master_agent:av_readdata -> CST455_Midterm_instruction_master_translator:uav_readdata
	wire          cst455_midterm_instruction_master_translator_avalon_universal_master_0_debugaccess;   // CST455_Midterm_instruction_master_translator:uav_debugaccess -> CST455_Midterm_instruction_master_agent:av_debugaccess
	wire   [27:0] cst455_midterm_instruction_master_translator_avalon_universal_master_0_address;       // CST455_Midterm_instruction_master_translator:uav_address -> CST455_Midterm_instruction_master_agent:av_address
	wire          cst455_midterm_instruction_master_translator_avalon_universal_master_0_read;          // CST455_Midterm_instruction_master_translator:uav_read -> CST455_Midterm_instruction_master_agent:av_read
	wire    [3:0] cst455_midterm_instruction_master_translator_avalon_universal_master_0_byteenable;    // CST455_Midterm_instruction_master_translator:uav_byteenable -> CST455_Midterm_instruction_master_agent:av_byteenable
	wire          cst455_midterm_instruction_master_translator_avalon_universal_master_0_readdatavalid; // CST455_Midterm_instruction_master_agent:av_readdatavalid -> CST455_Midterm_instruction_master_translator:uav_readdatavalid
	wire          cst455_midterm_instruction_master_translator_avalon_universal_master_0_lock;          // CST455_Midterm_instruction_master_translator:uav_lock -> CST455_Midterm_instruction_master_agent:av_lock
	wire          cst455_midterm_instruction_master_translator_avalon_universal_master_0_write;         // CST455_Midterm_instruction_master_translator:uav_write -> CST455_Midterm_instruction_master_agent:av_write
	wire   [31:0] cst455_midterm_instruction_master_translator_avalon_universal_master_0_writedata;     // CST455_Midterm_instruction_master_translator:uav_writedata -> CST455_Midterm_instruction_master_agent:av_writedata
	wire    [2:0] cst455_midterm_instruction_master_translator_avalon_universal_master_0_burstcount;    // CST455_Midterm_instruction_master_translator:uav_burstcount -> CST455_Midterm_instruction_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                                // rsp_mux_001:src_valid -> CST455_Midterm_instruction_master_agent:rp_valid
	wire  [105:0] rsp_mux_001_src_data;                                                                 // rsp_mux_001:src_data -> CST455_Midterm_instruction_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                                // CST455_Midterm_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [12:0] rsp_mux_001_src_channel;                                                              // rsp_mux_001:src_channel -> CST455_Midterm_instruction_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                        // rsp_mux_001:src_startofpacket -> CST455_Midterm_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                          // rsp_mux_001:src_endofpacket -> CST455_Midterm_instruction_master_agent:rp_endofpacket
	wire   [31:0] debug_avalon_jtag_slave_agent_m0_readdata;                                            // DEBUG_avalon_jtag_slave_translator:uav_readdata -> DEBUG_avalon_jtag_slave_agent:m0_readdata
	wire          debug_avalon_jtag_slave_agent_m0_waitrequest;                                         // DEBUG_avalon_jtag_slave_translator:uav_waitrequest -> DEBUG_avalon_jtag_slave_agent:m0_waitrequest
	wire          debug_avalon_jtag_slave_agent_m0_debugaccess;                                         // DEBUG_avalon_jtag_slave_agent:m0_debugaccess -> DEBUG_avalon_jtag_slave_translator:uav_debugaccess
	wire   [27:0] debug_avalon_jtag_slave_agent_m0_address;                                             // DEBUG_avalon_jtag_slave_agent:m0_address -> DEBUG_avalon_jtag_slave_translator:uav_address
	wire    [3:0] debug_avalon_jtag_slave_agent_m0_byteenable;                                          // DEBUG_avalon_jtag_slave_agent:m0_byteenable -> DEBUG_avalon_jtag_slave_translator:uav_byteenable
	wire          debug_avalon_jtag_slave_agent_m0_read;                                                // DEBUG_avalon_jtag_slave_agent:m0_read -> DEBUG_avalon_jtag_slave_translator:uav_read
	wire          debug_avalon_jtag_slave_agent_m0_readdatavalid;                                       // DEBUG_avalon_jtag_slave_translator:uav_readdatavalid -> DEBUG_avalon_jtag_slave_agent:m0_readdatavalid
	wire          debug_avalon_jtag_slave_agent_m0_lock;                                                // DEBUG_avalon_jtag_slave_agent:m0_lock -> DEBUG_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] debug_avalon_jtag_slave_agent_m0_writedata;                                           // DEBUG_avalon_jtag_slave_agent:m0_writedata -> DEBUG_avalon_jtag_slave_translator:uav_writedata
	wire          debug_avalon_jtag_slave_agent_m0_write;                                               // DEBUG_avalon_jtag_slave_agent:m0_write -> DEBUG_avalon_jtag_slave_translator:uav_write
	wire    [2:0] debug_avalon_jtag_slave_agent_m0_burstcount;                                          // DEBUG_avalon_jtag_slave_agent:m0_burstcount -> DEBUG_avalon_jtag_slave_translator:uav_burstcount
	wire          debug_avalon_jtag_slave_agent_rf_source_valid;                                        // DEBUG_avalon_jtag_slave_agent:rf_source_valid -> DEBUG_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [106:0] debug_avalon_jtag_slave_agent_rf_source_data;                                         // DEBUG_avalon_jtag_slave_agent:rf_source_data -> DEBUG_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          debug_avalon_jtag_slave_agent_rf_source_ready;                                        // DEBUG_avalon_jtag_slave_agent_rsp_fifo:in_ready -> DEBUG_avalon_jtag_slave_agent:rf_source_ready
	wire          debug_avalon_jtag_slave_agent_rf_source_startofpacket;                                // DEBUG_avalon_jtag_slave_agent:rf_source_startofpacket -> DEBUG_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          debug_avalon_jtag_slave_agent_rf_source_endofpacket;                                  // DEBUG_avalon_jtag_slave_agent:rf_source_endofpacket -> DEBUG_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          debug_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                     // DEBUG_avalon_jtag_slave_agent_rsp_fifo:out_valid -> DEBUG_avalon_jtag_slave_agent:rf_sink_valid
	wire  [106:0] debug_avalon_jtag_slave_agent_rsp_fifo_out_data;                                      // DEBUG_avalon_jtag_slave_agent_rsp_fifo:out_data -> DEBUG_avalon_jtag_slave_agent:rf_sink_data
	wire          debug_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                     // DEBUG_avalon_jtag_slave_agent:rf_sink_ready -> DEBUG_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          debug_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                             // DEBUG_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> DEBUG_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          debug_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                               // DEBUG_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> DEBUG_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                    // cmd_mux:src_valid -> DEBUG_avalon_jtag_slave_agent:cp_valid
	wire  [105:0] cmd_mux_src_data;                                                                     // cmd_mux:src_data -> DEBUG_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                                    // DEBUG_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [12:0] cmd_mux_src_channel;                                                                  // cmd_mux:src_channel -> DEBUG_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                            // cmd_mux:src_startofpacket -> DEBUG_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                              // cmd_mux:src_endofpacket -> DEBUG_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] leds_0_avalon_slave_0_agent_m0_readdata;                                              // LEDs_0_avalon_slave_0_translator:uav_readdata -> LEDs_0_avalon_slave_0_agent:m0_readdata
	wire          leds_0_avalon_slave_0_agent_m0_waitrequest;                                           // LEDs_0_avalon_slave_0_translator:uav_waitrequest -> LEDs_0_avalon_slave_0_agent:m0_waitrequest
	wire          leds_0_avalon_slave_0_agent_m0_debugaccess;                                           // LEDs_0_avalon_slave_0_agent:m0_debugaccess -> LEDs_0_avalon_slave_0_translator:uav_debugaccess
	wire   [27:0] leds_0_avalon_slave_0_agent_m0_address;                                               // LEDs_0_avalon_slave_0_agent:m0_address -> LEDs_0_avalon_slave_0_translator:uav_address
	wire    [3:0] leds_0_avalon_slave_0_agent_m0_byteenable;                                            // LEDs_0_avalon_slave_0_agent:m0_byteenable -> LEDs_0_avalon_slave_0_translator:uav_byteenable
	wire          leds_0_avalon_slave_0_agent_m0_read;                                                  // LEDs_0_avalon_slave_0_agent:m0_read -> LEDs_0_avalon_slave_0_translator:uav_read
	wire          leds_0_avalon_slave_0_agent_m0_readdatavalid;                                         // LEDs_0_avalon_slave_0_translator:uav_readdatavalid -> LEDs_0_avalon_slave_0_agent:m0_readdatavalid
	wire          leds_0_avalon_slave_0_agent_m0_lock;                                                  // LEDs_0_avalon_slave_0_agent:m0_lock -> LEDs_0_avalon_slave_0_translator:uav_lock
	wire   [31:0] leds_0_avalon_slave_0_agent_m0_writedata;                                             // LEDs_0_avalon_slave_0_agent:m0_writedata -> LEDs_0_avalon_slave_0_translator:uav_writedata
	wire          leds_0_avalon_slave_0_agent_m0_write;                                                 // LEDs_0_avalon_slave_0_agent:m0_write -> LEDs_0_avalon_slave_0_translator:uav_write
	wire    [2:0] leds_0_avalon_slave_0_agent_m0_burstcount;                                            // LEDs_0_avalon_slave_0_agent:m0_burstcount -> LEDs_0_avalon_slave_0_translator:uav_burstcount
	wire          leds_0_avalon_slave_0_agent_rf_source_valid;                                          // LEDs_0_avalon_slave_0_agent:rf_source_valid -> LEDs_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [106:0] leds_0_avalon_slave_0_agent_rf_source_data;                                           // LEDs_0_avalon_slave_0_agent:rf_source_data -> LEDs_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          leds_0_avalon_slave_0_agent_rf_source_ready;                                          // LEDs_0_avalon_slave_0_agent_rsp_fifo:in_ready -> LEDs_0_avalon_slave_0_agent:rf_source_ready
	wire          leds_0_avalon_slave_0_agent_rf_source_startofpacket;                                  // LEDs_0_avalon_slave_0_agent:rf_source_startofpacket -> LEDs_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          leds_0_avalon_slave_0_agent_rf_source_endofpacket;                                    // LEDs_0_avalon_slave_0_agent:rf_source_endofpacket -> LEDs_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          leds_0_avalon_slave_0_agent_rsp_fifo_out_valid;                                       // LEDs_0_avalon_slave_0_agent_rsp_fifo:out_valid -> LEDs_0_avalon_slave_0_agent:rf_sink_valid
	wire  [106:0] leds_0_avalon_slave_0_agent_rsp_fifo_out_data;                                        // LEDs_0_avalon_slave_0_agent_rsp_fifo:out_data -> LEDs_0_avalon_slave_0_agent:rf_sink_data
	wire          leds_0_avalon_slave_0_agent_rsp_fifo_out_ready;                                       // LEDs_0_avalon_slave_0_agent:rf_sink_ready -> LEDs_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          leds_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                               // LEDs_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> LEDs_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          leds_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                                 // LEDs_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> LEDs_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                                // cmd_mux_001:src_valid -> LEDs_0_avalon_slave_0_agent:cp_valid
	wire  [105:0] cmd_mux_001_src_data;                                                                 // cmd_mux_001:src_data -> LEDs_0_avalon_slave_0_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                // LEDs_0_avalon_slave_0_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [12:0] cmd_mux_001_src_channel;                                                              // cmd_mux_001:src_channel -> LEDs_0_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                        // cmd_mux_001:src_startofpacket -> LEDs_0_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                          // cmd_mux_001:src_endofpacket -> LEDs_0_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] switches_0_avalon_slave_0_agent_m0_readdata;                                          // Switches_0_avalon_slave_0_translator:uav_readdata -> Switches_0_avalon_slave_0_agent:m0_readdata
	wire          switches_0_avalon_slave_0_agent_m0_waitrequest;                                       // Switches_0_avalon_slave_0_translator:uav_waitrequest -> Switches_0_avalon_slave_0_agent:m0_waitrequest
	wire          switches_0_avalon_slave_0_agent_m0_debugaccess;                                       // Switches_0_avalon_slave_0_agent:m0_debugaccess -> Switches_0_avalon_slave_0_translator:uav_debugaccess
	wire   [27:0] switches_0_avalon_slave_0_agent_m0_address;                                           // Switches_0_avalon_slave_0_agent:m0_address -> Switches_0_avalon_slave_0_translator:uav_address
	wire    [3:0] switches_0_avalon_slave_0_agent_m0_byteenable;                                        // Switches_0_avalon_slave_0_agent:m0_byteenable -> Switches_0_avalon_slave_0_translator:uav_byteenable
	wire          switches_0_avalon_slave_0_agent_m0_read;                                              // Switches_0_avalon_slave_0_agent:m0_read -> Switches_0_avalon_slave_0_translator:uav_read
	wire          switches_0_avalon_slave_0_agent_m0_readdatavalid;                                     // Switches_0_avalon_slave_0_translator:uav_readdatavalid -> Switches_0_avalon_slave_0_agent:m0_readdatavalid
	wire          switches_0_avalon_slave_0_agent_m0_lock;                                              // Switches_0_avalon_slave_0_agent:m0_lock -> Switches_0_avalon_slave_0_translator:uav_lock
	wire   [31:0] switches_0_avalon_slave_0_agent_m0_writedata;                                         // Switches_0_avalon_slave_0_agent:m0_writedata -> Switches_0_avalon_slave_0_translator:uav_writedata
	wire          switches_0_avalon_slave_0_agent_m0_write;                                             // Switches_0_avalon_slave_0_agent:m0_write -> Switches_0_avalon_slave_0_translator:uav_write
	wire    [2:0] switches_0_avalon_slave_0_agent_m0_burstcount;                                        // Switches_0_avalon_slave_0_agent:m0_burstcount -> Switches_0_avalon_slave_0_translator:uav_burstcount
	wire          switches_0_avalon_slave_0_agent_rf_source_valid;                                      // Switches_0_avalon_slave_0_agent:rf_source_valid -> Switches_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [106:0] switches_0_avalon_slave_0_agent_rf_source_data;                                       // Switches_0_avalon_slave_0_agent:rf_source_data -> Switches_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          switches_0_avalon_slave_0_agent_rf_source_ready;                                      // Switches_0_avalon_slave_0_agent_rsp_fifo:in_ready -> Switches_0_avalon_slave_0_agent:rf_source_ready
	wire          switches_0_avalon_slave_0_agent_rf_source_startofpacket;                              // Switches_0_avalon_slave_0_agent:rf_source_startofpacket -> Switches_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          switches_0_avalon_slave_0_agent_rf_source_endofpacket;                                // Switches_0_avalon_slave_0_agent:rf_source_endofpacket -> Switches_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          switches_0_avalon_slave_0_agent_rsp_fifo_out_valid;                                   // Switches_0_avalon_slave_0_agent_rsp_fifo:out_valid -> Switches_0_avalon_slave_0_agent:rf_sink_valid
	wire  [106:0] switches_0_avalon_slave_0_agent_rsp_fifo_out_data;                                    // Switches_0_avalon_slave_0_agent_rsp_fifo:out_data -> Switches_0_avalon_slave_0_agent:rf_sink_data
	wire          switches_0_avalon_slave_0_agent_rsp_fifo_out_ready;                                   // Switches_0_avalon_slave_0_agent:rf_sink_ready -> Switches_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          switches_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                           // Switches_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> Switches_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          switches_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                             // Switches_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> Switches_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                // cmd_mux_002:src_valid -> Switches_0_avalon_slave_0_agent:cp_valid
	wire  [105:0] cmd_mux_002_src_data;                                                                 // cmd_mux_002:src_data -> Switches_0_avalon_slave_0_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                // Switches_0_avalon_slave_0_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [12:0] cmd_mux_002_src_channel;                                                              // cmd_mux_002:src_channel -> Switches_0_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                        // cmd_mux_002:src_startofpacket -> Switches_0_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                          // cmd_mux_002:src_endofpacket -> Switches_0_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] pushbuttons_0_avalon_slave_0_agent_m0_readdata;                                       // Pushbuttons_0_avalon_slave_0_translator:uav_readdata -> Pushbuttons_0_avalon_slave_0_agent:m0_readdata
	wire          pushbuttons_0_avalon_slave_0_agent_m0_waitrequest;                                    // Pushbuttons_0_avalon_slave_0_translator:uav_waitrequest -> Pushbuttons_0_avalon_slave_0_agent:m0_waitrequest
	wire          pushbuttons_0_avalon_slave_0_agent_m0_debugaccess;                                    // Pushbuttons_0_avalon_slave_0_agent:m0_debugaccess -> Pushbuttons_0_avalon_slave_0_translator:uav_debugaccess
	wire   [27:0] pushbuttons_0_avalon_slave_0_agent_m0_address;                                        // Pushbuttons_0_avalon_slave_0_agent:m0_address -> Pushbuttons_0_avalon_slave_0_translator:uav_address
	wire    [3:0] pushbuttons_0_avalon_slave_0_agent_m0_byteenable;                                     // Pushbuttons_0_avalon_slave_0_agent:m0_byteenable -> Pushbuttons_0_avalon_slave_0_translator:uav_byteenable
	wire          pushbuttons_0_avalon_slave_0_agent_m0_read;                                           // Pushbuttons_0_avalon_slave_0_agent:m0_read -> Pushbuttons_0_avalon_slave_0_translator:uav_read
	wire          pushbuttons_0_avalon_slave_0_agent_m0_readdatavalid;                                  // Pushbuttons_0_avalon_slave_0_translator:uav_readdatavalid -> Pushbuttons_0_avalon_slave_0_agent:m0_readdatavalid
	wire          pushbuttons_0_avalon_slave_0_agent_m0_lock;                                           // Pushbuttons_0_avalon_slave_0_agent:m0_lock -> Pushbuttons_0_avalon_slave_0_translator:uav_lock
	wire   [31:0] pushbuttons_0_avalon_slave_0_agent_m0_writedata;                                      // Pushbuttons_0_avalon_slave_0_agent:m0_writedata -> Pushbuttons_0_avalon_slave_0_translator:uav_writedata
	wire          pushbuttons_0_avalon_slave_0_agent_m0_write;                                          // Pushbuttons_0_avalon_slave_0_agent:m0_write -> Pushbuttons_0_avalon_slave_0_translator:uav_write
	wire    [2:0] pushbuttons_0_avalon_slave_0_agent_m0_burstcount;                                     // Pushbuttons_0_avalon_slave_0_agent:m0_burstcount -> Pushbuttons_0_avalon_slave_0_translator:uav_burstcount
	wire          pushbuttons_0_avalon_slave_0_agent_rf_source_valid;                                   // Pushbuttons_0_avalon_slave_0_agent:rf_source_valid -> Pushbuttons_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [106:0] pushbuttons_0_avalon_slave_0_agent_rf_source_data;                                    // Pushbuttons_0_avalon_slave_0_agent:rf_source_data -> Pushbuttons_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          pushbuttons_0_avalon_slave_0_agent_rf_source_ready;                                   // Pushbuttons_0_avalon_slave_0_agent_rsp_fifo:in_ready -> Pushbuttons_0_avalon_slave_0_agent:rf_source_ready
	wire          pushbuttons_0_avalon_slave_0_agent_rf_source_startofpacket;                           // Pushbuttons_0_avalon_slave_0_agent:rf_source_startofpacket -> Pushbuttons_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          pushbuttons_0_avalon_slave_0_agent_rf_source_endofpacket;                             // Pushbuttons_0_avalon_slave_0_agent:rf_source_endofpacket -> Pushbuttons_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          pushbuttons_0_avalon_slave_0_agent_rsp_fifo_out_valid;                                // Pushbuttons_0_avalon_slave_0_agent_rsp_fifo:out_valid -> Pushbuttons_0_avalon_slave_0_agent:rf_sink_valid
	wire  [106:0] pushbuttons_0_avalon_slave_0_agent_rsp_fifo_out_data;                                 // Pushbuttons_0_avalon_slave_0_agent_rsp_fifo:out_data -> Pushbuttons_0_avalon_slave_0_agent:rf_sink_data
	wire          pushbuttons_0_avalon_slave_0_agent_rsp_fifo_out_ready;                                // Pushbuttons_0_avalon_slave_0_agent:rf_sink_ready -> Pushbuttons_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          pushbuttons_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                        // Pushbuttons_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> Pushbuttons_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          pushbuttons_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                          // Pushbuttons_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> Pushbuttons_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                                // cmd_mux_003:src_valid -> Pushbuttons_0_avalon_slave_0_agent:cp_valid
	wire  [105:0] cmd_mux_003_src_data;                                                                 // cmd_mux_003:src_data -> Pushbuttons_0_avalon_slave_0_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                // Pushbuttons_0_avalon_slave_0_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [12:0] cmd_mux_003_src_channel;                                                              // cmd_mux_003:src_channel -> Pushbuttons_0_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                        // cmd_mux_003:src_startofpacket -> Pushbuttons_0_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                          // cmd_mux_003:src_endofpacket -> Pushbuttons_0_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] sevensegdecoder_1_avalon_slave_0_agent_m0_readdata;                                   // SevenSegDecoder_1_avalon_slave_0_translator:uav_readdata -> SevenSegDecoder_1_avalon_slave_0_agent:m0_readdata
	wire          sevensegdecoder_1_avalon_slave_0_agent_m0_waitrequest;                                // SevenSegDecoder_1_avalon_slave_0_translator:uav_waitrequest -> SevenSegDecoder_1_avalon_slave_0_agent:m0_waitrequest
	wire          sevensegdecoder_1_avalon_slave_0_agent_m0_debugaccess;                                // SevenSegDecoder_1_avalon_slave_0_agent:m0_debugaccess -> SevenSegDecoder_1_avalon_slave_0_translator:uav_debugaccess
	wire   [27:0] sevensegdecoder_1_avalon_slave_0_agent_m0_address;                                    // SevenSegDecoder_1_avalon_slave_0_agent:m0_address -> SevenSegDecoder_1_avalon_slave_0_translator:uav_address
	wire    [3:0] sevensegdecoder_1_avalon_slave_0_agent_m0_byteenable;                                 // SevenSegDecoder_1_avalon_slave_0_agent:m0_byteenable -> SevenSegDecoder_1_avalon_slave_0_translator:uav_byteenable
	wire          sevensegdecoder_1_avalon_slave_0_agent_m0_read;                                       // SevenSegDecoder_1_avalon_slave_0_agent:m0_read -> SevenSegDecoder_1_avalon_slave_0_translator:uav_read
	wire          sevensegdecoder_1_avalon_slave_0_agent_m0_readdatavalid;                              // SevenSegDecoder_1_avalon_slave_0_translator:uav_readdatavalid -> SevenSegDecoder_1_avalon_slave_0_agent:m0_readdatavalid
	wire          sevensegdecoder_1_avalon_slave_0_agent_m0_lock;                                       // SevenSegDecoder_1_avalon_slave_0_agent:m0_lock -> SevenSegDecoder_1_avalon_slave_0_translator:uav_lock
	wire   [31:0] sevensegdecoder_1_avalon_slave_0_agent_m0_writedata;                                  // SevenSegDecoder_1_avalon_slave_0_agent:m0_writedata -> SevenSegDecoder_1_avalon_slave_0_translator:uav_writedata
	wire          sevensegdecoder_1_avalon_slave_0_agent_m0_write;                                      // SevenSegDecoder_1_avalon_slave_0_agent:m0_write -> SevenSegDecoder_1_avalon_slave_0_translator:uav_write
	wire    [2:0] sevensegdecoder_1_avalon_slave_0_agent_m0_burstcount;                                 // SevenSegDecoder_1_avalon_slave_0_agent:m0_burstcount -> SevenSegDecoder_1_avalon_slave_0_translator:uav_burstcount
	wire          sevensegdecoder_1_avalon_slave_0_agent_rf_source_valid;                               // SevenSegDecoder_1_avalon_slave_0_agent:rf_source_valid -> SevenSegDecoder_1_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [106:0] sevensegdecoder_1_avalon_slave_0_agent_rf_source_data;                                // SevenSegDecoder_1_avalon_slave_0_agent:rf_source_data -> SevenSegDecoder_1_avalon_slave_0_agent_rsp_fifo:in_data
	wire          sevensegdecoder_1_avalon_slave_0_agent_rf_source_ready;                               // SevenSegDecoder_1_avalon_slave_0_agent_rsp_fifo:in_ready -> SevenSegDecoder_1_avalon_slave_0_agent:rf_source_ready
	wire          sevensegdecoder_1_avalon_slave_0_agent_rf_source_startofpacket;                       // SevenSegDecoder_1_avalon_slave_0_agent:rf_source_startofpacket -> SevenSegDecoder_1_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          sevensegdecoder_1_avalon_slave_0_agent_rf_source_endofpacket;                         // SevenSegDecoder_1_avalon_slave_0_agent:rf_source_endofpacket -> SevenSegDecoder_1_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sevensegdecoder_1_avalon_slave_0_agent_rsp_fifo_out_valid;                            // SevenSegDecoder_1_avalon_slave_0_agent_rsp_fifo:out_valid -> SevenSegDecoder_1_avalon_slave_0_agent:rf_sink_valid
	wire  [106:0] sevensegdecoder_1_avalon_slave_0_agent_rsp_fifo_out_data;                             // SevenSegDecoder_1_avalon_slave_0_agent_rsp_fifo:out_data -> SevenSegDecoder_1_avalon_slave_0_agent:rf_sink_data
	wire          sevensegdecoder_1_avalon_slave_0_agent_rsp_fifo_out_ready;                            // SevenSegDecoder_1_avalon_slave_0_agent:rf_sink_ready -> SevenSegDecoder_1_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          sevensegdecoder_1_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                    // SevenSegDecoder_1_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> SevenSegDecoder_1_avalon_slave_0_agent:rf_sink_startofpacket
	wire          sevensegdecoder_1_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                      // SevenSegDecoder_1_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> SevenSegDecoder_1_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                                // cmd_mux_004:src_valid -> SevenSegDecoder_1_avalon_slave_0_agent:cp_valid
	wire  [105:0] cmd_mux_004_src_data;                                                                 // cmd_mux_004:src_data -> SevenSegDecoder_1_avalon_slave_0_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                // SevenSegDecoder_1_avalon_slave_0_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [12:0] cmd_mux_004_src_channel;                                                              // cmd_mux_004:src_channel -> SevenSegDecoder_1_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                        // cmd_mux_004:src_startofpacket -> SevenSegDecoder_1_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                          // cmd_mux_004:src_endofpacket -> SevenSegDecoder_1_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] sevensegdecoder_2_avalon_slave_0_agent_m0_readdata;                                   // SevenSegDecoder_2_avalon_slave_0_translator:uav_readdata -> SevenSegDecoder_2_avalon_slave_0_agent:m0_readdata
	wire          sevensegdecoder_2_avalon_slave_0_agent_m0_waitrequest;                                // SevenSegDecoder_2_avalon_slave_0_translator:uav_waitrequest -> SevenSegDecoder_2_avalon_slave_0_agent:m0_waitrequest
	wire          sevensegdecoder_2_avalon_slave_0_agent_m0_debugaccess;                                // SevenSegDecoder_2_avalon_slave_0_agent:m0_debugaccess -> SevenSegDecoder_2_avalon_slave_0_translator:uav_debugaccess
	wire   [27:0] sevensegdecoder_2_avalon_slave_0_agent_m0_address;                                    // SevenSegDecoder_2_avalon_slave_0_agent:m0_address -> SevenSegDecoder_2_avalon_slave_0_translator:uav_address
	wire    [3:0] sevensegdecoder_2_avalon_slave_0_agent_m0_byteenable;                                 // SevenSegDecoder_2_avalon_slave_0_agent:m0_byteenable -> SevenSegDecoder_2_avalon_slave_0_translator:uav_byteenable
	wire          sevensegdecoder_2_avalon_slave_0_agent_m0_read;                                       // SevenSegDecoder_2_avalon_slave_0_agent:m0_read -> SevenSegDecoder_2_avalon_slave_0_translator:uav_read
	wire          sevensegdecoder_2_avalon_slave_0_agent_m0_readdatavalid;                              // SevenSegDecoder_2_avalon_slave_0_translator:uav_readdatavalid -> SevenSegDecoder_2_avalon_slave_0_agent:m0_readdatavalid
	wire          sevensegdecoder_2_avalon_slave_0_agent_m0_lock;                                       // SevenSegDecoder_2_avalon_slave_0_agent:m0_lock -> SevenSegDecoder_2_avalon_slave_0_translator:uav_lock
	wire   [31:0] sevensegdecoder_2_avalon_slave_0_agent_m0_writedata;                                  // SevenSegDecoder_2_avalon_slave_0_agent:m0_writedata -> SevenSegDecoder_2_avalon_slave_0_translator:uav_writedata
	wire          sevensegdecoder_2_avalon_slave_0_agent_m0_write;                                      // SevenSegDecoder_2_avalon_slave_0_agent:m0_write -> SevenSegDecoder_2_avalon_slave_0_translator:uav_write
	wire    [2:0] sevensegdecoder_2_avalon_slave_0_agent_m0_burstcount;                                 // SevenSegDecoder_2_avalon_slave_0_agent:m0_burstcount -> SevenSegDecoder_2_avalon_slave_0_translator:uav_burstcount
	wire          sevensegdecoder_2_avalon_slave_0_agent_rf_source_valid;                               // SevenSegDecoder_2_avalon_slave_0_agent:rf_source_valid -> SevenSegDecoder_2_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [106:0] sevensegdecoder_2_avalon_slave_0_agent_rf_source_data;                                // SevenSegDecoder_2_avalon_slave_0_agent:rf_source_data -> SevenSegDecoder_2_avalon_slave_0_agent_rsp_fifo:in_data
	wire          sevensegdecoder_2_avalon_slave_0_agent_rf_source_ready;                               // SevenSegDecoder_2_avalon_slave_0_agent_rsp_fifo:in_ready -> SevenSegDecoder_2_avalon_slave_0_agent:rf_source_ready
	wire          sevensegdecoder_2_avalon_slave_0_agent_rf_source_startofpacket;                       // SevenSegDecoder_2_avalon_slave_0_agent:rf_source_startofpacket -> SevenSegDecoder_2_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          sevensegdecoder_2_avalon_slave_0_agent_rf_source_endofpacket;                         // SevenSegDecoder_2_avalon_slave_0_agent:rf_source_endofpacket -> SevenSegDecoder_2_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sevensegdecoder_2_avalon_slave_0_agent_rsp_fifo_out_valid;                            // SevenSegDecoder_2_avalon_slave_0_agent_rsp_fifo:out_valid -> SevenSegDecoder_2_avalon_slave_0_agent:rf_sink_valid
	wire  [106:0] sevensegdecoder_2_avalon_slave_0_agent_rsp_fifo_out_data;                             // SevenSegDecoder_2_avalon_slave_0_agent_rsp_fifo:out_data -> SevenSegDecoder_2_avalon_slave_0_agent:rf_sink_data
	wire          sevensegdecoder_2_avalon_slave_0_agent_rsp_fifo_out_ready;                            // SevenSegDecoder_2_avalon_slave_0_agent:rf_sink_ready -> SevenSegDecoder_2_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          sevensegdecoder_2_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                    // SevenSegDecoder_2_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> SevenSegDecoder_2_avalon_slave_0_agent:rf_sink_startofpacket
	wire          sevensegdecoder_2_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                      // SevenSegDecoder_2_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> SevenSegDecoder_2_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                                // cmd_mux_005:src_valid -> SevenSegDecoder_2_avalon_slave_0_agent:cp_valid
	wire  [105:0] cmd_mux_005_src_data;                                                                 // cmd_mux_005:src_data -> SevenSegDecoder_2_avalon_slave_0_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                // SevenSegDecoder_2_avalon_slave_0_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [12:0] cmd_mux_005_src_channel;                                                              // cmd_mux_005:src_channel -> SevenSegDecoder_2_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                        // cmd_mux_005:src_startofpacket -> SevenSegDecoder_2_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                          // cmd_mux_005:src_endofpacket -> SevenSegDecoder_2_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] sevensegdecoder_4_avalon_slave_0_agent_m0_readdata;                                   // SevenSegDecoder_4_avalon_slave_0_translator:uav_readdata -> SevenSegDecoder_4_avalon_slave_0_agent:m0_readdata
	wire          sevensegdecoder_4_avalon_slave_0_agent_m0_waitrequest;                                // SevenSegDecoder_4_avalon_slave_0_translator:uav_waitrequest -> SevenSegDecoder_4_avalon_slave_0_agent:m0_waitrequest
	wire          sevensegdecoder_4_avalon_slave_0_agent_m0_debugaccess;                                // SevenSegDecoder_4_avalon_slave_0_agent:m0_debugaccess -> SevenSegDecoder_4_avalon_slave_0_translator:uav_debugaccess
	wire   [27:0] sevensegdecoder_4_avalon_slave_0_agent_m0_address;                                    // SevenSegDecoder_4_avalon_slave_0_agent:m0_address -> SevenSegDecoder_4_avalon_slave_0_translator:uav_address
	wire    [3:0] sevensegdecoder_4_avalon_slave_0_agent_m0_byteenable;                                 // SevenSegDecoder_4_avalon_slave_0_agent:m0_byteenable -> SevenSegDecoder_4_avalon_slave_0_translator:uav_byteenable
	wire          sevensegdecoder_4_avalon_slave_0_agent_m0_read;                                       // SevenSegDecoder_4_avalon_slave_0_agent:m0_read -> SevenSegDecoder_4_avalon_slave_0_translator:uav_read
	wire          sevensegdecoder_4_avalon_slave_0_agent_m0_readdatavalid;                              // SevenSegDecoder_4_avalon_slave_0_translator:uav_readdatavalid -> SevenSegDecoder_4_avalon_slave_0_agent:m0_readdatavalid
	wire          sevensegdecoder_4_avalon_slave_0_agent_m0_lock;                                       // SevenSegDecoder_4_avalon_slave_0_agent:m0_lock -> SevenSegDecoder_4_avalon_slave_0_translator:uav_lock
	wire   [31:0] sevensegdecoder_4_avalon_slave_0_agent_m0_writedata;                                  // SevenSegDecoder_4_avalon_slave_0_agent:m0_writedata -> SevenSegDecoder_4_avalon_slave_0_translator:uav_writedata
	wire          sevensegdecoder_4_avalon_slave_0_agent_m0_write;                                      // SevenSegDecoder_4_avalon_slave_0_agent:m0_write -> SevenSegDecoder_4_avalon_slave_0_translator:uav_write
	wire    [2:0] sevensegdecoder_4_avalon_slave_0_agent_m0_burstcount;                                 // SevenSegDecoder_4_avalon_slave_0_agent:m0_burstcount -> SevenSegDecoder_4_avalon_slave_0_translator:uav_burstcount
	wire          sevensegdecoder_4_avalon_slave_0_agent_rf_source_valid;                               // SevenSegDecoder_4_avalon_slave_0_agent:rf_source_valid -> SevenSegDecoder_4_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [106:0] sevensegdecoder_4_avalon_slave_0_agent_rf_source_data;                                // SevenSegDecoder_4_avalon_slave_0_agent:rf_source_data -> SevenSegDecoder_4_avalon_slave_0_agent_rsp_fifo:in_data
	wire          sevensegdecoder_4_avalon_slave_0_agent_rf_source_ready;                               // SevenSegDecoder_4_avalon_slave_0_agent_rsp_fifo:in_ready -> SevenSegDecoder_4_avalon_slave_0_agent:rf_source_ready
	wire          sevensegdecoder_4_avalon_slave_0_agent_rf_source_startofpacket;                       // SevenSegDecoder_4_avalon_slave_0_agent:rf_source_startofpacket -> SevenSegDecoder_4_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          sevensegdecoder_4_avalon_slave_0_agent_rf_source_endofpacket;                         // SevenSegDecoder_4_avalon_slave_0_agent:rf_source_endofpacket -> SevenSegDecoder_4_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sevensegdecoder_4_avalon_slave_0_agent_rsp_fifo_out_valid;                            // SevenSegDecoder_4_avalon_slave_0_agent_rsp_fifo:out_valid -> SevenSegDecoder_4_avalon_slave_0_agent:rf_sink_valid
	wire  [106:0] sevensegdecoder_4_avalon_slave_0_agent_rsp_fifo_out_data;                             // SevenSegDecoder_4_avalon_slave_0_agent_rsp_fifo:out_data -> SevenSegDecoder_4_avalon_slave_0_agent:rf_sink_data
	wire          sevensegdecoder_4_avalon_slave_0_agent_rsp_fifo_out_ready;                            // SevenSegDecoder_4_avalon_slave_0_agent:rf_sink_ready -> SevenSegDecoder_4_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          sevensegdecoder_4_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                    // SevenSegDecoder_4_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> SevenSegDecoder_4_avalon_slave_0_agent:rf_sink_startofpacket
	wire          sevensegdecoder_4_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                      // SevenSegDecoder_4_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> SevenSegDecoder_4_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                                // cmd_mux_006:src_valid -> SevenSegDecoder_4_avalon_slave_0_agent:cp_valid
	wire  [105:0] cmd_mux_006_src_data;                                                                 // cmd_mux_006:src_data -> SevenSegDecoder_4_avalon_slave_0_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                // SevenSegDecoder_4_avalon_slave_0_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [12:0] cmd_mux_006_src_channel;                                                              // cmd_mux_006:src_channel -> SevenSegDecoder_4_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                        // cmd_mux_006:src_startofpacket -> SevenSegDecoder_4_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                          // cmd_mux_006:src_endofpacket -> SevenSegDecoder_4_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] sevensegdecoder_5_avalon_slave_0_agent_m0_readdata;                                   // SevenSegDecoder_5_avalon_slave_0_translator:uav_readdata -> SevenSegDecoder_5_avalon_slave_0_agent:m0_readdata
	wire          sevensegdecoder_5_avalon_slave_0_agent_m0_waitrequest;                                // SevenSegDecoder_5_avalon_slave_0_translator:uav_waitrequest -> SevenSegDecoder_5_avalon_slave_0_agent:m0_waitrequest
	wire          sevensegdecoder_5_avalon_slave_0_agent_m0_debugaccess;                                // SevenSegDecoder_5_avalon_slave_0_agent:m0_debugaccess -> SevenSegDecoder_5_avalon_slave_0_translator:uav_debugaccess
	wire   [27:0] sevensegdecoder_5_avalon_slave_0_agent_m0_address;                                    // SevenSegDecoder_5_avalon_slave_0_agent:m0_address -> SevenSegDecoder_5_avalon_slave_0_translator:uav_address
	wire    [3:0] sevensegdecoder_5_avalon_slave_0_agent_m0_byteenable;                                 // SevenSegDecoder_5_avalon_slave_0_agent:m0_byteenable -> SevenSegDecoder_5_avalon_slave_0_translator:uav_byteenable
	wire          sevensegdecoder_5_avalon_slave_0_agent_m0_read;                                       // SevenSegDecoder_5_avalon_slave_0_agent:m0_read -> SevenSegDecoder_5_avalon_slave_0_translator:uav_read
	wire          sevensegdecoder_5_avalon_slave_0_agent_m0_readdatavalid;                              // SevenSegDecoder_5_avalon_slave_0_translator:uav_readdatavalid -> SevenSegDecoder_5_avalon_slave_0_agent:m0_readdatavalid
	wire          sevensegdecoder_5_avalon_slave_0_agent_m0_lock;                                       // SevenSegDecoder_5_avalon_slave_0_agent:m0_lock -> SevenSegDecoder_5_avalon_slave_0_translator:uav_lock
	wire   [31:0] sevensegdecoder_5_avalon_slave_0_agent_m0_writedata;                                  // SevenSegDecoder_5_avalon_slave_0_agent:m0_writedata -> SevenSegDecoder_5_avalon_slave_0_translator:uav_writedata
	wire          sevensegdecoder_5_avalon_slave_0_agent_m0_write;                                      // SevenSegDecoder_5_avalon_slave_0_agent:m0_write -> SevenSegDecoder_5_avalon_slave_0_translator:uav_write
	wire    [2:0] sevensegdecoder_5_avalon_slave_0_agent_m0_burstcount;                                 // SevenSegDecoder_5_avalon_slave_0_agent:m0_burstcount -> SevenSegDecoder_5_avalon_slave_0_translator:uav_burstcount
	wire          sevensegdecoder_5_avalon_slave_0_agent_rf_source_valid;                               // SevenSegDecoder_5_avalon_slave_0_agent:rf_source_valid -> SevenSegDecoder_5_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [106:0] sevensegdecoder_5_avalon_slave_0_agent_rf_source_data;                                // SevenSegDecoder_5_avalon_slave_0_agent:rf_source_data -> SevenSegDecoder_5_avalon_slave_0_agent_rsp_fifo:in_data
	wire          sevensegdecoder_5_avalon_slave_0_agent_rf_source_ready;                               // SevenSegDecoder_5_avalon_slave_0_agent_rsp_fifo:in_ready -> SevenSegDecoder_5_avalon_slave_0_agent:rf_source_ready
	wire          sevensegdecoder_5_avalon_slave_0_agent_rf_source_startofpacket;                       // SevenSegDecoder_5_avalon_slave_0_agent:rf_source_startofpacket -> SevenSegDecoder_5_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          sevensegdecoder_5_avalon_slave_0_agent_rf_source_endofpacket;                         // SevenSegDecoder_5_avalon_slave_0_agent:rf_source_endofpacket -> SevenSegDecoder_5_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sevensegdecoder_5_avalon_slave_0_agent_rsp_fifo_out_valid;                            // SevenSegDecoder_5_avalon_slave_0_agent_rsp_fifo:out_valid -> SevenSegDecoder_5_avalon_slave_0_agent:rf_sink_valid
	wire  [106:0] sevensegdecoder_5_avalon_slave_0_agent_rsp_fifo_out_data;                             // SevenSegDecoder_5_avalon_slave_0_agent_rsp_fifo:out_data -> SevenSegDecoder_5_avalon_slave_0_agent:rf_sink_data
	wire          sevensegdecoder_5_avalon_slave_0_agent_rsp_fifo_out_ready;                            // SevenSegDecoder_5_avalon_slave_0_agent:rf_sink_ready -> SevenSegDecoder_5_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          sevensegdecoder_5_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                    // SevenSegDecoder_5_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> SevenSegDecoder_5_avalon_slave_0_agent:rf_sink_startofpacket
	wire          sevensegdecoder_5_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                      // SevenSegDecoder_5_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> SevenSegDecoder_5_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                                // cmd_mux_007:src_valid -> SevenSegDecoder_5_avalon_slave_0_agent:cp_valid
	wire  [105:0] cmd_mux_007_src_data;                                                                 // cmd_mux_007:src_data -> SevenSegDecoder_5_avalon_slave_0_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                // SevenSegDecoder_5_avalon_slave_0_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [12:0] cmd_mux_007_src_channel;                                                              // cmd_mux_007:src_channel -> SevenSegDecoder_5_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                        // cmd_mux_007:src_startofpacket -> SevenSegDecoder_5_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                          // cmd_mux_007:src_endofpacket -> SevenSegDecoder_5_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] sevensegdecoder_3_avalon_slave_0_agent_m0_readdata;                                   // SevenSegDecoder_3_avalon_slave_0_translator:uav_readdata -> SevenSegDecoder_3_avalon_slave_0_agent:m0_readdata
	wire          sevensegdecoder_3_avalon_slave_0_agent_m0_waitrequest;                                // SevenSegDecoder_3_avalon_slave_0_translator:uav_waitrequest -> SevenSegDecoder_3_avalon_slave_0_agent:m0_waitrequest
	wire          sevensegdecoder_3_avalon_slave_0_agent_m0_debugaccess;                                // SevenSegDecoder_3_avalon_slave_0_agent:m0_debugaccess -> SevenSegDecoder_3_avalon_slave_0_translator:uav_debugaccess
	wire   [27:0] sevensegdecoder_3_avalon_slave_0_agent_m0_address;                                    // SevenSegDecoder_3_avalon_slave_0_agent:m0_address -> SevenSegDecoder_3_avalon_slave_0_translator:uav_address
	wire    [3:0] sevensegdecoder_3_avalon_slave_0_agent_m0_byteenable;                                 // SevenSegDecoder_3_avalon_slave_0_agent:m0_byteenable -> SevenSegDecoder_3_avalon_slave_0_translator:uav_byteenable
	wire          sevensegdecoder_3_avalon_slave_0_agent_m0_read;                                       // SevenSegDecoder_3_avalon_slave_0_agent:m0_read -> SevenSegDecoder_3_avalon_slave_0_translator:uav_read
	wire          sevensegdecoder_3_avalon_slave_0_agent_m0_readdatavalid;                              // SevenSegDecoder_3_avalon_slave_0_translator:uav_readdatavalid -> SevenSegDecoder_3_avalon_slave_0_agent:m0_readdatavalid
	wire          sevensegdecoder_3_avalon_slave_0_agent_m0_lock;                                       // SevenSegDecoder_3_avalon_slave_0_agent:m0_lock -> SevenSegDecoder_3_avalon_slave_0_translator:uav_lock
	wire   [31:0] sevensegdecoder_3_avalon_slave_0_agent_m0_writedata;                                  // SevenSegDecoder_3_avalon_slave_0_agent:m0_writedata -> SevenSegDecoder_3_avalon_slave_0_translator:uav_writedata
	wire          sevensegdecoder_3_avalon_slave_0_agent_m0_write;                                      // SevenSegDecoder_3_avalon_slave_0_agent:m0_write -> SevenSegDecoder_3_avalon_slave_0_translator:uav_write
	wire    [2:0] sevensegdecoder_3_avalon_slave_0_agent_m0_burstcount;                                 // SevenSegDecoder_3_avalon_slave_0_agent:m0_burstcount -> SevenSegDecoder_3_avalon_slave_0_translator:uav_burstcount
	wire          sevensegdecoder_3_avalon_slave_0_agent_rf_source_valid;                               // SevenSegDecoder_3_avalon_slave_0_agent:rf_source_valid -> SevenSegDecoder_3_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [106:0] sevensegdecoder_3_avalon_slave_0_agent_rf_source_data;                                // SevenSegDecoder_3_avalon_slave_0_agent:rf_source_data -> SevenSegDecoder_3_avalon_slave_0_agent_rsp_fifo:in_data
	wire          sevensegdecoder_3_avalon_slave_0_agent_rf_source_ready;                               // SevenSegDecoder_3_avalon_slave_0_agent_rsp_fifo:in_ready -> SevenSegDecoder_3_avalon_slave_0_agent:rf_source_ready
	wire          sevensegdecoder_3_avalon_slave_0_agent_rf_source_startofpacket;                       // SevenSegDecoder_3_avalon_slave_0_agent:rf_source_startofpacket -> SevenSegDecoder_3_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          sevensegdecoder_3_avalon_slave_0_agent_rf_source_endofpacket;                         // SevenSegDecoder_3_avalon_slave_0_agent:rf_source_endofpacket -> SevenSegDecoder_3_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sevensegdecoder_3_avalon_slave_0_agent_rsp_fifo_out_valid;                            // SevenSegDecoder_3_avalon_slave_0_agent_rsp_fifo:out_valid -> SevenSegDecoder_3_avalon_slave_0_agent:rf_sink_valid
	wire  [106:0] sevensegdecoder_3_avalon_slave_0_agent_rsp_fifo_out_data;                             // SevenSegDecoder_3_avalon_slave_0_agent_rsp_fifo:out_data -> SevenSegDecoder_3_avalon_slave_0_agent:rf_sink_data
	wire          sevensegdecoder_3_avalon_slave_0_agent_rsp_fifo_out_ready;                            // SevenSegDecoder_3_avalon_slave_0_agent:rf_sink_ready -> SevenSegDecoder_3_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          sevensegdecoder_3_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                    // SevenSegDecoder_3_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> SevenSegDecoder_3_avalon_slave_0_agent:rf_sink_startofpacket
	wire          sevensegdecoder_3_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                      // SevenSegDecoder_3_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> SevenSegDecoder_3_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                                // cmd_mux_008:src_valid -> SevenSegDecoder_3_avalon_slave_0_agent:cp_valid
	wire  [105:0] cmd_mux_008_src_data;                                                                 // cmd_mux_008:src_data -> SevenSegDecoder_3_avalon_slave_0_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                                // SevenSegDecoder_3_avalon_slave_0_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [12:0] cmd_mux_008_src_channel;                                                              // cmd_mux_008:src_channel -> SevenSegDecoder_3_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                        // cmd_mux_008:src_startofpacket -> SevenSegDecoder_3_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                          // cmd_mux_008:src_endofpacket -> SevenSegDecoder_3_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] sevensegdecoder_0_avalon_slave_0_agent_m0_readdata;                                   // SevenSegDecoder_0_avalon_slave_0_translator:uav_readdata -> SevenSegDecoder_0_avalon_slave_0_agent:m0_readdata
	wire          sevensegdecoder_0_avalon_slave_0_agent_m0_waitrequest;                                // SevenSegDecoder_0_avalon_slave_0_translator:uav_waitrequest -> SevenSegDecoder_0_avalon_slave_0_agent:m0_waitrequest
	wire          sevensegdecoder_0_avalon_slave_0_agent_m0_debugaccess;                                // SevenSegDecoder_0_avalon_slave_0_agent:m0_debugaccess -> SevenSegDecoder_0_avalon_slave_0_translator:uav_debugaccess
	wire   [27:0] sevensegdecoder_0_avalon_slave_0_agent_m0_address;                                    // SevenSegDecoder_0_avalon_slave_0_agent:m0_address -> SevenSegDecoder_0_avalon_slave_0_translator:uav_address
	wire    [3:0] sevensegdecoder_0_avalon_slave_0_agent_m0_byteenable;                                 // SevenSegDecoder_0_avalon_slave_0_agent:m0_byteenable -> SevenSegDecoder_0_avalon_slave_0_translator:uav_byteenable
	wire          sevensegdecoder_0_avalon_slave_0_agent_m0_read;                                       // SevenSegDecoder_0_avalon_slave_0_agent:m0_read -> SevenSegDecoder_0_avalon_slave_0_translator:uav_read
	wire          sevensegdecoder_0_avalon_slave_0_agent_m0_readdatavalid;                              // SevenSegDecoder_0_avalon_slave_0_translator:uav_readdatavalid -> SevenSegDecoder_0_avalon_slave_0_agent:m0_readdatavalid
	wire          sevensegdecoder_0_avalon_slave_0_agent_m0_lock;                                       // SevenSegDecoder_0_avalon_slave_0_agent:m0_lock -> SevenSegDecoder_0_avalon_slave_0_translator:uav_lock
	wire   [31:0] sevensegdecoder_0_avalon_slave_0_agent_m0_writedata;                                  // SevenSegDecoder_0_avalon_slave_0_agent:m0_writedata -> SevenSegDecoder_0_avalon_slave_0_translator:uav_writedata
	wire          sevensegdecoder_0_avalon_slave_0_agent_m0_write;                                      // SevenSegDecoder_0_avalon_slave_0_agent:m0_write -> SevenSegDecoder_0_avalon_slave_0_translator:uav_write
	wire    [2:0] sevensegdecoder_0_avalon_slave_0_agent_m0_burstcount;                                 // SevenSegDecoder_0_avalon_slave_0_agent:m0_burstcount -> SevenSegDecoder_0_avalon_slave_0_translator:uav_burstcount
	wire          sevensegdecoder_0_avalon_slave_0_agent_rf_source_valid;                               // SevenSegDecoder_0_avalon_slave_0_agent:rf_source_valid -> SevenSegDecoder_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [106:0] sevensegdecoder_0_avalon_slave_0_agent_rf_source_data;                                // SevenSegDecoder_0_avalon_slave_0_agent:rf_source_data -> SevenSegDecoder_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          sevensegdecoder_0_avalon_slave_0_agent_rf_source_ready;                               // SevenSegDecoder_0_avalon_slave_0_agent_rsp_fifo:in_ready -> SevenSegDecoder_0_avalon_slave_0_agent:rf_source_ready
	wire          sevensegdecoder_0_avalon_slave_0_agent_rf_source_startofpacket;                       // SevenSegDecoder_0_avalon_slave_0_agent:rf_source_startofpacket -> SevenSegDecoder_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          sevensegdecoder_0_avalon_slave_0_agent_rf_source_endofpacket;                         // SevenSegDecoder_0_avalon_slave_0_agent:rf_source_endofpacket -> SevenSegDecoder_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sevensegdecoder_0_avalon_slave_0_agent_rsp_fifo_out_valid;                            // SevenSegDecoder_0_avalon_slave_0_agent_rsp_fifo:out_valid -> SevenSegDecoder_0_avalon_slave_0_agent:rf_sink_valid
	wire  [106:0] sevensegdecoder_0_avalon_slave_0_agent_rsp_fifo_out_data;                             // SevenSegDecoder_0_avalon_slave_0_agent_rsp_fifo:out_data -> SevenSegDecoder_0_avalon_slave_0_agent:rf_sink_data
	wire          sevensegdecoder_0_avalon_slave_0_agent_rsp_fifo_out_ready;                            // SevenSegDecoder_0_avalon_slave_0_agent:rf_sink_ready -> SevenSegDecoder_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          sevensegdecoder_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                    // SevenSegDecoder_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> SevenSegDecoder_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          sevensegdecoder_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                      // SevenSegDecoder_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> SevenSegDecoder_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                                // cmd_mux_009:src_valid -> SevenSegDecoder_0_avalon_slave_0_agent:cp_valid
	wire  [105:0] cmd_mux_009_src_data;                                                                 // cmd_mux_009:src_data -> SevenSegDecoder_0_avalon_slave_0_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                                // SevenSegDecoder_0_avalon_slave_0_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [12:0] cmd_mux_009_src_channel;                                                              // cmd_mux_009:src_channel -> SevenSegDecoder_0_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                        // cmd_mux_009:src_startofpacket -> SevenSegDecoder_0_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                          // cmd_mux_009:src_endofpacket -> SevenSegDecoder_0_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] cst455_midterm_debug_mem_slave_agent_m0_readdata;                                     // CST455_Midterm_debug_mem_slave_translator:uav_readdata -> CST455_Midterm_debug_mem_slave_agent:m0_readdata
	wire          cst455_midterm_debug_mem_slave_agent_m0_waitrequest;                                  // CST455_Midterm_debug_mem_slave_translator:uav_waitrequest -> CST455_Midterm_debug_mem_slave_agent:m0_waitrequest
	wire          cst455_midterm_debug_mem_slave_agent_m0_debugaccess;                                  // CST455_Midterm_debug_mem_slave_agent:m0_debugaccess -> CST455_Midterm_debug_mem_slave_translator:uav_debugaccess
	wire   [27:0] cst455_midterm_debug_mem_slave_agent_m0_address;                                      // CST455_Midterm_debug_mem_slave_agent:m0_address -> CST455_Midterm_debug_mem_slave_translator:uav_address
	wire    [3:0] cst455_midterm_debug_mem_slave_agent_m0_byteenable;                                   // CST455_Midterm_debug_mem_slave_agent:m0_byteenable -> CST455_Midterm_debug_mem_slave_translator:uav_byteenable
	wire          cst455_midterm_debug_mem_slave_agent_m0_read;                                         // CST455_Midterm_debug_mem_slave_agent:m0_read -> CST455_Midterm_debug_mem_slave_translator:uav_read
	wire          cst455_midterm_debug_mem_slave_agent_m0_readdatavalid;                                // CST455_Midterm_debug_mem_slave_translator:uav_readdatavalid -> CST455_Midterm_debug_mem_slave_agent:m0_readdatavalid
	wire          cst455_midterm_debug_mem_slave_agent_m0_lock;                                         // CST455_Midterm_debug_mem_slave_agent:m0_lock -> CST455_Midterm_debug_mem_slave_translator:uav_lock
	wire   [31:0] cst455_midterm_debug_mem_slave_agent_m0_writedata;                                    // CST455_Midterm_debug_mem_slave_agent:m0_writedata -> CST455_Midterm_debug_mem_slave_translator:uav_writedata
	wire          cst455_midterm_debug_mem_slave_agent_m0_write;                                        // CST455_Midterm_debug_mem_slave_agent:m0_write -> CST455_Midterm_debug_mem_slave_translator:uav_write
	wire    [2:0] cst455_midterm_debug_mem_slave_agent_m0_burstcount;                                   // CST455_Midterm_debug_mem_slave_agent:m0_burstcount -> CST455_Midterm_debug_mem_slave_translator:uav_burstcount
	wire          cst455_midterm_debug_mem_slave_agent_rf_source_valid;                                 // CST455_Midterm_debug_mem_slave_agent:rf_source_valid -> CST455_Midterm_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [106:0] cst455_midterm_debug_mem_slave_agent_rf_source_data;                                  // CST455_Midterm_debug_mem_slave_agent:rf_source_data -> CST455_Midterm_debug_mem_slave_agent_rsp_fifo:in_data
	wire          cst455_midterm_debug_mem_slave_agent_rf_source_ready;                                 // CST455_Midterm_debug_mem_slave_agent_rsp_fifo:in_ready -> CST455_Midterm_debug_mem_slave_agent:rf_source_ready
	wire          cst455_midterm_debug_mem_slave_agent_rf_source_startofpacket;                         // CST455_Midterm_debug_mem_slave_agent:rf_source_startofpacket -> CST455_Midterm_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          cst455_midterm_debug_mem_slave_agent_rf_source_endofpacket;                           // CST455_Midterm_debug_mem_slave_agent:rf_source_endofpacket -> CST455_Midterm_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          cst455_midterm_debug_mem_slave_agent_rsp_fifo_out_valid;                              // CST455_Midterm_debug_mem_slave_agent_rsp_fifo:out_valid -> CST455_Midterm_debug_mem_slave_agent:rf_sink_valid
	wire  [106:0] cst455_midterm_debug_mem_slave_agent_rsp_fifo_out_data;                               // CST455_Midterm_debug_mem_slave_agent_rsp_fifo:out_data -> CST455_Midterm_debug_mem_slave_agent:rf_sink_data
	wire          cst455_midterm_debug_mem_slave_agent_rsp_fifo_out_ready;                              // CST455_Midterm_debug_mem_slave_agent:rf_sink_ready -> CST455_Midterm_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          cst455_midterm_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // CST455_Midterm_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> CST455_Midterm_debug_mem_slave_agent:rf_sink_startofpacket
	wire          cst455_midterm_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // CST455_Midterm_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> CST455_Midterm_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                                // cmd_mux_010:src_valid -> CST455_Midterm_debug_mem_slave_agent:cp_valid
	wire  [105:0] cmd_mux_010_src_data;                                                                 // cmd_mux_010:src_data -> CST455_Midterm_debug_mem_slave_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                // CST455_Midterm_debug_mem_slave_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [12:0] cmd_mux_010_src_channel;                                                              // cmd_mux_010:src_channel -> CST455_Midterm_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                        // cmd_mux_010:src_startofpacket -> CST455_Midterm_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                          // cmd_mux_010:src_endofpacket -> CST455_Midterm_debug_mem_slave_agent:cp_endofpacket
	wire   [15:0] sdram_s1_agent_m0_readdata;                                                           // SDRAM_s1_translator:uav_readdata -> SDRAM_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                        // SDRAM_s1_translator:uav_waitrequest -> SDRAM_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                        // SDRAM_s1_agent:m0_debugaccess -> SDRAM_s1_translator:uav_debugaccess
	wire   [27:0] sdram_s1_agent_m0_address;                                                            // SDRAM_s1_agent:m0_address -> SDRAM_s1_translator:uav_address
	wire    [1:0] sdram_s1_agent_m0_byteenable;                                                         // SDRAM_s1_agent:m0_byteenable -> SDRAM_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                               // SDRAM_s1_agent:m0_read -> SDRAM_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                                      // SDRAM_s1_translator:uav_readdatavalid -> SDRAM_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                               // SDRAM_s1_agent:m0_lock -> SDRAM_s1_translator:uav_lock
	wire   [15:0] sdram_s1_agent_m0_writedata;                                                          // SDRAM_s1_agent:m0_writedata -> SDRAM_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                              // SDRAM_s1_agent:m0_write -> SDRAM_s1_translator:uav_write
	wire    [1:0] sdram_s1_agent_m0_burstcount;                                                         // SDRAM_s1_agent:m0_burstcount -> SDRAM_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                                       // SDRAM_s1_agent:rf_source_valid -> SDRAM_s1_agent_rsp_fifo:in_valid
	wire   [88:0] sdram_s1_agent_rf_source_data;                                                        // SDRAM_s1_agent:rf_source_data -> SDRAM_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                       // SDRAM_s1_agent_rsp_fifo:in_ready -> SDRAM_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                               // SDRAM_s1_agent:rf_source_startofpacket -> SDRAM_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                                 // SDRAM_s1_agent:rf_source_endofpacket -> SDRAM_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                                    // SDRAM_s1_agent_rsp_fifo:out_valid -> SDRAM_s1_agent:rf_sink_valid
	wire   [88:0] sdram_s1_agent_rsp_fifo_out_data;                                                     // SDRAM_s1_agent_rsp_fifo:out_data -> SDRAM_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                                    // SDRAM_s1_agent:rf_sink_ready -> SDRAM_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                            // SDRAM_s1_agent_rsp_fifo:out_startofpacket -> SDRAM_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                              // SDRAM_s1_agent_rsp_fifo:out_endofpacket -> SDRAM_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                                  // SDRAM_s1_agent:rdata_fifo_src_valid -> SDRAM_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_src_data;                                                   // SDRAM_s1_agent:rdata_fifo_src_data -> SDRAM_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                                  // SDRAM_s1_agent_rdata_fifo:in_ready -> SDRAM_s1_agent:rdata_fifo_src_ready
	wire   [31:0] sys_clk_s1_agent_m0_readdata;                                                         // sys_clk_s1_translator:uav_readdata -> sys_clk_s1_agent:m0_readdata
	wire          sys_clk_s1_agent_m0_waitrequest;                                                      // sys_clk_s1_translator:uav_waitrequest -> sys_clk_s1_agent:m0_waitrequest
	wire          sys_clk_s1_agent_m0_debugaccess;                                                      // sys_clk_s1_agent:m0_debugaccess -> sys_clk_s1_translator:uav_debugaccess
	wire   [27:0] sys_clk_s1_agent_m0_address;                                                          // sys_clk_s1_agent:m0_address -> sys_clk_s1_translator:uav_address
	wire    [3:0] sys_clk_s1_agent_m0_byteenable;                                                       // sys_clk_s1_agent:m0_byteenable -> sys_clk_s1_translator:uav_byteenable
	wire          sys_clk_s1_agent_m0_read;                                                             // sys_clk_s1_agent:m0_read -> sys_clk_s1_translator:uav_read
	wire          sys_clk_s1_agent_m0_readdatavalid;                                                    // sys_clk_s1_translator:uav_readdatavalid -> sys_clk_s1_agent:m0_readdatavalid
	wire          sys_clk_s1_agent_m0_lock;                                                             // sys_clk_s1_agent:m0_lock -> sys_clk_s1_translator:uav_lock
	wire   [31:0] sys_clk_s1_agent_m0_writedata;                                                        // sys_clk_s1_agent:m0_writedata -> sys_clk_s1_translator:uav_writedata
	wire          sys_clk_s1_agent_m0_write;                                                            // sys_clk_s1_agent:m0_write -> sys_clk_s1_translator:uav_write
	wire    [2:0] sys_clk_s1_agent_m0_burstcount;                                                       // sys_clk_s1_agent:m0_burstcount -> sys_clk_s1_translator:uav_burstcount
	wire          sys_clk_s1_agent_rf_source_valid;                                                     // sys_clk_s1_agent:rf_source_valid -> sys_clk_s1_agent_rsp_fifo:in_valid
	wire  [106:0] sys_clk_s1_agent_rf_source_data;                                                      // sys_clk_s1_agent:rf_source_data -> sys_clk_s1_agent_rsp_fifo:in_data
	wire          sys_clk_s1_agent_rf_source_ready;                                                     // sys_clk_s1_agent_rsp_fifo:in_ready -> sys_clk_s1_agent:rf_source_ready
	wire          sys_clk_s1_agent_rf_source_startofpacket;                                             // sys_clk_s1_agent:rf_source_startofpacket -> sys_clk_s1_agent_rsp_fifo:in_startofpacket
	wire          sys_clk_s1_agent_rf_source_endofpacket;                                               // sys_clk_s1_agent:rf_source_endofpacket -> sys_clk_s1_agent_rsp_fifo:in_endofpacket
	wire          sys_clk_s1_agent_rsp_fifo_out_valid;                                                  // sys_clk_s1_agent_rsp_fifo:out_valid -> sys_clk_s1_agent:rf_sink_valid
	wire  [106:0] sys_clk_s1_agent_rsp_fifo_out_data;                                                   // sys_clk_s1_agent_rsp_fifo:out_data -> sys_clk_s1_agent:rf_sink_data
	wire          sys_clk_s1_agent_rsp_fifo_out_ready;                                                  // sys_clk_s1_agent:rf_sink_ready -> sys_clk_s1_agent_rsp_fifo:out_ready
	wire          sys_clk_s1_agent_rsp_fifo_out_startofpacket;                                          // sys_clk_s1_agent_rsp_fifo:out_startofpacket -> sys_clk_s1_agent:rf_sink_startofpacket
	wire          sys_clk_s1_agent_rsp_fifo_out_endofpacket;                                            // sys_clk_s1_agent_rsp_fifo:out_endofpacket -> sys_clk_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                                // cmd_mux_012:src_valid -> sys_clk_s1_agent:cp_valid
	wire  [105:0] cmd_mux_012_src_data;                                                                 // cmd_mux_012:src_data -> sys_clk_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                                // sys_clk_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [12:0] cmd_mux_012_src_channel;                                                              // cmd_mux_012:src_channel -> sys_clk_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                        // cmd_mux_012:src_startofpacket -> sys_clk_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                          // cmd_mux_012:src_endofpacket -> sys_clk_s1_agent:cp_endofpacket
	wire          cst455_midterm_data_master_agent_cp_valid;                                            // CST455_Midterm_data_master_agent:cp_valid -> router:sink_valid
	wire  [105:0] cst455_midterm_data_master_agent_cp_data;                                             // CST455_Midterm_data_master_agent:cp_data -> router:sink_data
	wire          cst455_midterm_data_master_agent_cp_ready;                                            // router:sink_ready -> CST455_Midterm_data_master_agent:cp_ready
	wire          cst455_midterm_data_master_agent_cp_startofpacket;                                    // CST455_Midterm_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          cst455_midterm_data_master_agent_cp_endofpacket;                                      // CST455_Midterm_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                     // router:src_valid -> cmd_demux:sink_valid
	wire  [105:0] router_src_data;                                                                      // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                     // cmd_demux:sink_ready -> router:src_ready
	wire   [12:0] router_src_channel;                                                                   // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                             // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                               // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          cst455_midterm_instruction_master_agent_cp_valid;                                     // CST455_Midterm_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [105:0] cst455_midterm_instruction_master_agent_cp_data;                                      // CST455_Midterm_instruction_master_agent:cp_data -> router_001:sink_data
	wire          cst455_midterm_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> CST455_Midterm_instruction_master_agent:cp_ready
	wire          cst455_midterm_instruction_master_agent_cp_startofpacket;                             // CST455_Midterm_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          cst455_midterm_instruction_master_agent_cp_endofpacket;                               // CST455_Midterm_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                 // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [105:0] router_001_src_data;                                                                  // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                                 // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [12:0] router_001_src_channel;                                                               // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                         // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                           // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          debug_avalon_jtag_slave_agent_rp_valid;                                               // DEBUG_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [105:0] debug_avalon_jtag_slave_agent_rp_data;                                                // DEBUG_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire          debug_avalon_jtag_slave_agent_rp_ready;                                               // router_002:sink_ready -> DEBUG_avalon_jtag_slave_agent:rp_ready
	wire          debug_avalon_jtag_slave_agent_rp_startofpacket;                                       // DEBUG_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          debug_avalon_jtag_slave_agent_rp_endofpacket;                                         // DEBUG_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                 // router_002:src_valid -> rsp_demux:sink_valid
	wire  [105:0] router_002_src_data;                                                                  // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                                 // rsp_demux:sink_ready -> router_002:src_ready
	wire   [12:0] router_002_src_channel;                                                               // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                         // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                           // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          leds_0_avalon_slave_0_agent_rp_valid;                                                 // LEDs_0_avalon_slave_0_agent:rp_valid -> router_003:sink_valid
	wire  [105:0] leds_0_avalon_slave_0_agent_rp_data;                                                  // LEDs_0_avalon_slave_0_agent:rp_data -> router_003:sink_data
	wire          leds_0_avalon_slave_0_agent_rp_ready;                                                 // router_003:sink_ready -> LEDs_0_avalon_slave_0_agent:rp_ready
	wire          leds_0_avalon_slave_0_agent_rp_startofpacket;                                         // LEDs_0_avalon_slave_0_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          leds_0_avalon_slave_0_agent_rp_endofpacket;                                           // LEDs_0_avalon_slave_0_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                 // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [105:0] router_003_src_data;                                                                  // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                                 // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [12:0] router_003_src_channel;                                                               // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                         // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                           // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          switches_0_avalon_slave_0_agent_rp_valid;                                             // Switches_0_avalon_slave_0_agent:rp_valid -> router_004:sink_valid
	wire  [105:0] switches_0_avalon_slave_0_agent_rp_data;                                              // Switches_0_avalon_slave_0_agent:rp_data -> router_004:sink_data
	wire          switches_0_avalon_slave_0_agent_rp_ready;                                             // router_004:sink_ready -> Switches_0_avalon_slave_0_agent:rp_ready
	wire          switches_0_avalon_slave_0_agent_rp_startofpacket;                                     // Switches_0_avalon_slave_0_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          switches_0_avalon_slave_0_agent_rp_endofpacket;                                       // Switches_0_avalon_slave_0_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                 // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [105:0] router_004_src_data;                                                                  // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                                 // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [12:0] router_004_src_channel;                                                               // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                         // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                           // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          pushbuttons_0_avalon_slave_0_agent_rp_valid;                                          // Pushbuttons_0_avalon_slave_0_agent:rp_valid -> router_005:sink_valid
	wire  [105:0] pushbuttons_0_avalon_slave_0_agent_rp_data;                                           // Pushbuttons_0_avalon_slave_0_agent:rp_data -> router_005:sink_data
	wire          pushbuttons_0_avalon_slave_0_agent_rp_ready;                                          // router_005:sink_ready -> Pushbuttons_0_avalon_slave_0_agent:rp_ready
	wire          pushbuttons_0_avalon_slave_0_agent_rp_startofpacket;                                  // Pushbuttons_0_avalon_slave_0_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          pushbuttons_0_avalon_slave_0_agent_rp_endofpacket;                                    // Pushbuttons_0_avalon_slave_0_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                 // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [105:0] router_005_src_data;                                                                  // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                                 // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [12:0] router_005_src_channel;                                                               // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                         // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                           // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          sevensegdecoder_1_avalon_slave_0_agent_rp_valid;                                      // SevenSegDecoder_1_avalon_slave_0_agent:rp_valid -> router_006:sink_valid
	wire  [105:0] sevensegdecoder_1_avalon_slave_0_agent_rp_data;                                       // SevenSegDecoder_1_avalon_slave_0_agent:rp_data -> router_006:sink_data
	wire          sevensegdecoder_1_avalon_slave_0_agent_rp_ready;                                      // router_006:sink_ready -> SevenSegDecoder_1_avalon_slave_0_agent:rp_ready
	wire          sevensegdecoder_1_avalon_slave_0_agent_rp_startofpacket;                              // SevenSegDecoder_1_avalon_slave_0_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          sevensegdecoder_1_avalon_slave_0_agent_rp_endofpacket;                                // SevenSegDecoder_1_avalon_slave_0_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                 // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [105:0] router_006_src_data;                                                                  // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                                 // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [12:0] router_006_src_channel;                                                               // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                                         // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                           // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          sevensegdecoder_2_avalon_slave_0_agent_rp_valid;                                      // SevenSegDecoder_2_avalon_slave_0_agent:rp_valid -> router_007:sink_valid
	wire  [105:0] sevensegdecoder_2_avalon_slave_0_agent_rp_data;                                       // SevenSegDecoder_2_avalon_slave_0_agent:rp_data -> router_007:sink_data
	wire          sevensegdecoder_2_avalon_slave_0_agent_rp_ready;                                      // router_007:sink_ready -> SevenSegDecoder_2_avalon_slave_0_agent:rp_ready
	wire          sevensegdecoder_2_avalon_slave_0_agent_rp_startofpacket;                              // SevenSegDecoder_2_avalon_slave_0_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          sevensegdecoder_2_avalon_slave_0_agent_rp_endofpacket;                                // SevenSegDecoder_2_avalon_slave_0_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                 // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [105:0] router_007_src_data;                                                                  // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                                 // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [12:0] router_007_src_channel;                                                               // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                         // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                           // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          sevensegdecoder_4_avalon_slave_0_agent_rp_valid;                                      // SevenSegDecoder_4_avalon_slave_0_agent:rp_valid -> router_008:sink_valid
	wire  [105:0] sevensegdecoder_4_avalon_slave_0_agent_rp_data;                                       // SevenSegDecoder_4_avalon_slave_0_agent:rp_data -> router_008:sink_data
	wire          sevensegdecoder_4_avalon_slave_0_agent_rp_ready;                                      // router_008:sink_ready -> SevenSegDecoder_4_avalon_slave_0_agent:rp_ready
	wire          sevensegdecoder_4_avalon_slave_0_agent_rp_startofpacket;                              // SevenSegDecoder_4_avalon_slave_0_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          sevensegdecoder_4_avalon_slave_0_agent_rp_endofpacket;                                // SevenSegDecoder_4_avalon_slave_0_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                 // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [105:0] router_008_src_data;                                                                  // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                                 // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [12:0] router_008_src_channel;                                                               // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                         // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                           // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          sevensegdecoder_5_avalon_slave_0_agent_rp_valid;                                      // SevenSegDecoder_5_avalon_slave_0_agent:rp_valid -> router_009:sink_valid
	wire  [105:0] sevensegdecoder_5_avalon_slave_0_agent_rp_data;                                       // SevenSegDecoder_5_avalon_slave_0_agent:rp_data -> router_009:sink_data
	wire          sevensegdecoder_5_avalon_slave_0_agent_rp_ready;                                      // router_009:sink_ready -> SevenSegDecoder_5_avalon_slave_0_agent:rp_ready
	wire          sevensegdecoder_5_avalon_slave_0_agent_rp_startofpacket;                              // SevenSegDecoder_5_avalon_slave_0_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          sevensegdecoder_5_avalon_slave_0_agent_rp_endofpacket;                                // SevenSegDecoder_5_avalon_slave_0_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                 // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [105:0] router_009_src_data;                                                                  // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                                 // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [12:0] router_009_src_channel;                                                               // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                         // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                           // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          sevensegdecoder_3_avalon_slave_0_agent_rp_valid;                                      // SevenSegDecoder_3_avalon_slave_0_agent:rp_valid -> router_010:sink_valid
	wire  [105:0] sevensegdecoder_3_avalon_slave_0_agent_rp_data;                                       // SevenSegDecoder_3_avalon_slave_0_agent:rp_data -> router_010:sink_data
	wire          sevensegdecoder_3_avalon_slave_0_agent_rp_ready;                                      // router_010:sink_ready -> SevenSegDecoder_3_avalon_slave_0_agent:rp_ready
	wire          sevensegdecoder_3_avalon_slave_0_agent_rp_startofpacket;                              // SevenSegDecoder_3_avalon_slave_0_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          sevensegdecoder_3_avalon_slave_0_agent_rp_endofpacket;                                // SevenSegDecoder_3_avalon_slave_0_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                 // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [105:0] router_010_src_data;                                                                  // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                                 // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [12:0] router_010_src_channel;                                                               // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                                         // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                           // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          sevensegdecoder_0_avalon_slave_0_agent_rp_valid;                                      // SevenSegDecoder_0_avalon_slave_0_agent:rp_valid -> router_011:sink_valid
	wire  [105:0] sevensegdecoder_0_avalon_slave_0_agent_rp_data;                                       // SevenSegDecoder_0_avalon_slave_0_agent:rp_data -> router_011:sink_data
	wire          sevensegdecoder_0_avalon_slave_0_agent_rp_ready;                                      // router_011:sink_ready -> SevenSegDecoder_0_avalon_slave_0_agent:rp_ready
	wire          sevensegdecoder_0_avalon_slave_0_agent_rp_startofpacket;                              // SevenSegDecoder_0_avalon_slave_0_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          sevensegdecoder_0_avalon_slave_0_agent_rp_endofpacket;                                // SevenSegDecoder_0_avalon_slave_0_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                 // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [105:0] router_011_src_data;                                                                  // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                                                 // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [12:0] router_011_src_channel;                                                               // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                                         // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                                           // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          cst455_midterm_debug_mem_slave_agent_rp_valid;                                        // CST455_Midterm_debug_mem_slave_agent:rp_valid -> router_012:sink_valid
	wire  [105:0] cst455_midterm_debug_mem_slave_agent_rp_data;                                         // CST455_Midterm_debug_mem_slave_agent:rp_data -> router_012:sink_data
	wire          cst455_midterm_debug_mem_slave_agent_rp_ready;                                        // router_012:sink_ready -> CST455_Midterm_debug_mem_slave_agent:rp_ready
	wire          cst455_midterm_debug_mem_slave_agent_rp_startofpacket;                                // CST455_Midterm_debug_mem_slave_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          cst455_midterm_debug_mem_slave_agent_rp_endofpacket;                                  // CST455_Midterm_debug_mem_slave_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                 // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [105:0] router_012_src_data;                                                                  // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                                                 // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [12:0] router_012_src_channel;                                                               // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                                         // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                                           // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                              // SDRAM_s1_agent:rp_valid -> router_013:sink_valid
	wire   [87:0] sdram_s1_agent_rp_data;                                                               // SDRAM_s1_agent:rp_data -> router_013:sink_data
	wire          sdram_s1_agent_rp_ready;                                                              // router_013:sink_ready -> SDRAM_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                                      // SDRAM_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                        // SDRAM_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          sys_clk_s1_agent_rp_valid;                                                            // sys_clk_s1_agent:rp_valid -> router_014:sink_valid
	wire  [105:0] sys_clk_s1_agent_rp_data;                                                             // sys_clk_s1_agent:rp_data -> router_014:sink_data
	wire          sys_clk_s1_agent_rp_ready;                                                            // router_014:sink_ready -> sys_clk_s1_agent:rp_ready
	wire          sys_clk_s1_agent_rp_startofpacket;                                                    // sys_clk_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          sys_clk_s1_agent_rp_endofpacket;                                                      // sys_clk_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                 // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [105:0] router_014_src_data;                                                                  // router_014:src_data -> rsp_demux_012:sink_data
	wire          router_014_src_ready;                                                                 // rsp_demux_012:sink_ready -> router_014:src_ready
	wire   [12:0] router_014_src_channel;                                                               // router_014:src_channel -> rsp_demux_012:sink_channel
	wire          router_014_src_startofpacket;                                                         // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_014_src_endofpacket;                                                           // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                                 // SDRAM_s1_burst_adapter:source0_valid -> SDRAM_s1_agent:cp_valid
	wire   [87:0] sdram_s1_burst_adapter_source0_data;                                                  // SDRAM_s1_burst_adapter:source0_data -> SDRAM_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                                 // SDRAM_s1_agent:cp_ready -> SDRAM_s1_burst_adapter:source0_ready
	wire   [12:0] sdram_s1_burst_adapter_source0_channel;                                               // SDRAM_s1_burst_adapter:source0_channel -> SDRAM_s1_agent:cp_channel
	wire          sdram_s1_burst_adapter_source0_startofpacket;                                         // SDRAM_s1_burst_adapter:source0_startofpacket -> SDRAM_s1_agent:cp_startofpacket
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                           // SDRAM_s1_burst_adapter:source0_endofpacket -> SDRAM_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                 // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [105:0] cmd_demux_src0_data;                                                                  // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                 // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [12:0] cmd_demux_src0_channel;                                                               // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                         // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                           // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                 // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [105:0] cmd_demux_src1_data;                                                                  // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                 // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [12:0] cmd_demux_src1_channel;                                                               // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                         // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                           // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                 // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [105:0] cmd_demux_src2_data;                                                                  // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                 // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [12:0] cmd_demux_src2_channel;                                                               // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                         // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                           // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                 // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [105:0] cmd_demux_src3_data;                                                                  // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                                 // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [12:0] cmd_demux_src3_channel;                                                               // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                         // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                           // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                 // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [105:0] cmd_demux_src4_data;                                                                  // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                                 // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [12:0] cmd_demux_src4_channel;                                                               // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                         // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                           // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                 // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [105:0] cmd_demux_src5_data;                                                                  // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                                 // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [12:0] cmd_demux_src5_channel;                                                               // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                         // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                           // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                 // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [105:0] cmd_demux_src6_data;                                                                  // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                                 // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [12:0] cmd_demux_src6_channel;                                                               // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                         // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                           // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                 // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [105:0] cmd_demux_src7_data;                                                                  // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                                 // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [12:0] cmd_demux_src7_channel;                                                               // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                         // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                           // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                                 // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [105:0] cmd_demux_src8_data;                                                                  // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                                 // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [12:0] cmd_demux_src8_channel;                                                               // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                         // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                           // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                                 // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [105:0] cmd_demux_src9_data;                                                                  // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                                 // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [12:0] cmd_demux_src9_channel;                                                               // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                         // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                           // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                                // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [105:0] cmd_demux_src10_data;                                                                 // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                                // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [12:0] cmd_demux_src10_channel;                                                              // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                        // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                          // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                                // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [105:0] cmd_demux_src11_data;                                                                 // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                                // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [12:0] cmd_demux_src11_channel;                                                              // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                        // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                          // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                                // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [105:0] cmd_demux_src12_data;                                                                 // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                                // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [12:0] cmd_demux_src12_channel;                                                              // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                        // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                          // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                             // cmd_demux_001:src0_valid -> cmd_mux_010:sink1_valid
	wire  [105:0] cmd_demux_001_src0_data;                                                              // cmd_demux_001:src0_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_001_src0_ready;                                                             // cmd_mux_010:sink1_ready -> cmd_demux_001:src0_ready
	wire   [12:0] cmd_demux_001_src0_channel;                                                           // cmd_demux_001:src0_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                     // cmd_demux_001:src0_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                       // cmd_demux_001:src0_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                             // cmd_demux_001:src1_valid -> cmd_mux_011:sink1_valid
	wire  [105:0] cmd_demux_001_src1_data;                                                              // cmd_demux_001:src1_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_001_src1_ready;                                                             // cmd_mux_011:sink1_ready -> cmd_demux_001:src1_ready
	wire   [12:0] cmd_demux_001_src1_channel;                                                           // cmd_demux_001:src1_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                     // cmd_demux_001:src1_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                       // cmd_demux_001:src1_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                 // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [105:0] rsp_demux_src0_data;                                                                  // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                 // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [12:0] rsp_demux_src0_channel;                                                               // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                         // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                           // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                             // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [105:0] rsp_demux_001_src0_data;                                                              // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                             // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [12:0] rsp_demux_001_src0_channel;                                                           // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                     // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                       // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                             // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [105:0] rsp_demux_002_src0_data;                                                              // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                             // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [12:0] rsp_demux_002_src0_channel;                                                           // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                     // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                       // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                             // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [105:0] rsp_demux_003_src0_data;                                                              // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                             // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [12:0] rsp_demux_003_src0_channel;                                                           // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                     // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                       // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                             // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [105:0] rsp_demux_004_src0_data;                                                              // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                             // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [12:0] rsp_demux_004_src0_channel;                                                           // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                     // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                       // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                             // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [105:0] rsp_demux_005_src0_data;                                                              // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                             // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [12:0] rsp_demux_005_src0_channel;                                                           // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                     // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                       // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                             // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [105:0] rsp_demux_006_src0_data;                                                              // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                             // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [12:0] rsp_demux_006_src0_channel;                                                           // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                     // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                       // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                             // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [105:0] rsp_demux_007_src0_data;                                                              // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                             // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [12:0] rsp_demux_007_src0_channel;                                                           // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                     // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                       // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                             // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [105:0] rsp_demux_008_src0_data;                                                              // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                             // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [12:0] rsp_demux_008_src0_channel;                                                           // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                     // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                       // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                             // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [105:0] rsp_demux_009_src0_data;                                                              // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                             // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [12:0] rsp_demux_009_src0_channel;                                                           // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                     // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                       // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                             // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [105:0] rsp_demux_010_src0_data;                                                              // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                             // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [12:0] rsp_demux_010_src0_channel;                                                           // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                     // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                       // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                                             // rsp_demux_010:src1_valid -> rsp_mux_001:sink0_valid
	wire  [105:0] rsp_demux_010_src1_data;                                                              // rsp_demux_010:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_010_src1_ready;                                                             // rsp_mux_001:sink0_ready -> rsp_demux_010:src1_ready
	wire   [12:0] rsp_demux_010_src1_channel;                                                           // rsp_demux_010:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_010_src1_startofpacket;                                                     // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                       // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_011_src0_valid;                                                             // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [105:0] rsp_demux_011_src0_data;                                                              // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                             // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [12:0] rsp_demux_011_src0_channel;                                                           // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                     // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                       // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                                             // rsp_demux_011:src1_valid -> rsp_mux_001:sink1_valid
	wire  [105:0] rsp_demux_011_src1_data;                                                              // rsp_demux_011:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_011_src1_ready;                                                             // rsp_mux_001:sink1_ready -> rsp_demux_011:src1_ready
	wire   [12:0] rsp_demux_011_src1_channel;                                                           // rsp_demux_011:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_011_src1_startofpacket;                                                     // rsp_demux_011:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                                       // rsp_demux_011:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_012_src0_valid;                                                             // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [105:0] rsp_demux_012_src0_data;                                                              // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                             // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [12:0] rsp_demux_012_src0_channel;                                                           // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                     // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                       // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          router_013_src_valid;                                                                 // router_013:src_valid -> SDRAM_s1_rsp_width_adapter:in_valid
	wire   [87:0] router_013_src_data;                                                                  // router_013:src_data -> SDRAM_s1_rsp_width_adapter:in_data
	wire          router_013_src_ready;                                                                 // SDRAM_s1_rsp_width_adapter:in_ready -> router_013:src_ready
	wire   [12:0] router_013_src_channel;                                                               // router_013:src_channel -> SDRAM_s1_rsp_width_adapter:in_channel
	wire          router_013_src_startofpacket;                                                         // router_013:src_startofpacket -> SDRAM_s1_rsp_width_adapter:in_startofpacket
	wire          router_013_src_endofpacket;                                                           // router_013:src_endofpacket -> SDRAM_s1_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_rsp_width_adapter_src_valid;                                                 // SDRAM_s1_rsp_width_adapter:out_valid -> rsp_demux_011:sink_valid
	wire  [105:0] sdram_s1_rsp_width_adapter_src_data;                                                  // SDRAM_s1_rsp_width_adapter:out_data -> rsp_demux_011:sink_data
	wire          sdram_s1_rsp_width_adapter_src_ready;                                                 // rsp_demux_011:sink_ready -> SDRAM_s1_rsp_width_adapter:out_ready
	wire   [12:0] sdram_s1_rsp_width_adapter_src_channel;                                               // SDRAM_s1_rsp_width_adapter:out_channel -> rsp_demux_011:sink_channel
	wire          sdram_s1_rsp_width_adapter_src_startofpacket;                                         // SDRAM_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          sdram_s1_rsp_width_adapter_src_endofpacket;                                           // SDRAM_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                                // cmd_mux_011:src_valid -> SDRAM_s1_cmd_width_adapter:in_valid
	wire  [105:0] cmd_mux_011_src_data;                                                                 // cmd_mux_011:src_data -> SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_mux_011_src_ready;                                                                // SDRAM_s1_cmd_width_adapter:in_ready -> cmd_mux_011:src_ready
	wire   [12:0] cmd_mux_011_src_channel;                                                              // cmd_mux_011:src_channel -> SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_011_src_startofpacket;                                                        // cmd_mux_011:src_startofpacket -> SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                          // cmd_mux_011:src_endofpacket -> SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          sdram_s1_cmd_width_adapter_src_valid;                                                 // SDRAM_s1_cmd_width_adapter:out_valid -> SDRAM_s1_burst_adapter:sink0_valid
	wire   [87:0] sdram_s1_cmd_width_adapter_src_data;                                                  // SDRAM_s1_cmd_width_adapter:out_data -> SDRAM_s1_burst_adapter:sink0_data
	wire          sdram_s1_cmd_width_adapter_src_ready;                                                 // SDRAM_s1_burst_adapter:sink0_ready -> SDRAM_s1_cmd_width_adapter:out_ready
	wire   [12:0] sdram_s1_cmd_width_adapter_src_channel;                                               // SDRAM_s1_cmd_width_adapter:out_channel -> SDRAM_s1_burst_adapter:sink0_channel
	wire          sdram_s1_cmd_width_adapter_src_startofpacket;                                         // SDRAM_s1_cmd_width_adapter:out_startofpacket -> SDRAM_s1_burst_adapter:sink0_startofpacket
	wire          sdram_s1_cmd_width_adapter_src_endofpacket;                                           // SDRAM_s1_cmd_width_adapter:out_endofpacket -> SDRAM_s1_burst_adapter:sink0_endofpacket
	wire          debug_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                   // DEBUG_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] debug_avalon_jtag_slave_agent_rdata_fifo_src_data;                                    // DEBUG_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          debug_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter:in_0_ready -> DEBUG_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                        // avalon_st_adapter:out_0_valid -> DEBUG_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                         // avalon_st_adapter:out_0_data -> DEBUG_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                        // DEBUG_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                        // avalon_st_adapter:out_0_error -> DEBUG_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          leds_0_avalon_slave_0_agent_rdata_fifo_src_valid;                                     // LEDs_0_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] leds_0_avalon_slave_0_agent_rdata_fifo_src_data;                                      // LEDs_0_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          leds_0_avalon_slave_0_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_001:in_0_ready -> LEDs_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                    // avalon_st_adapter_001:out_0_valid -> LEDs_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                     // avalon_st_adapter_001:out_0_data -> LEDs_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                    // LEDs_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                    // avalon_st_adapter_001:out_0_error -> LEDs_0_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          switches_0_avalon_slave_0_agent_rdata_fifo_src_valid;                                 // Switches_0_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] switches_0_avalon_slave_0_agent_rdata_fifo_src_data;                                  // Switches_0_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          switches_0_avalon_slave_0_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_002:in_0_ready -> Switches_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                    // avalon_st_adapter_002:out_0_valid -> Switches_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                     // avalon_st_adapter_002:out_0_data -> Switches_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                    // Switches_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                    // avalon_st_adapter_002:out_0_error -> Switches_0_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          pushbuttons_0_avalon_slave_0_agent_rdata_fifo_src_valid;                              // Pushbuttons_0_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] pushbuttons_0_avalon_slave_0_agent_rdata_fifo_src_data;                               // Pushbuttons_0_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          pushbuttons_0_avalon_slave_0_agent_rdata_fifo_src_ready;                              // avalon_st_adapter_003:in_0_ready -> Pushbuttons_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                    // avalon_st_adapter_003:out_0_valid -> Pushbuttons_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                     // avalon_st_adapter_003:out_0_data -> Pushbuttons_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                    // Pushbuttons_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                    // avalon_st_adapter_003:out_0_error -> Pushbuttons_0_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          sevensegdecoder_1_avalon_slave_0_agent_rdata_fifo_src_valid;                          // SevenSegDecoder_1_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] sevensegdecoder_1_avalon_slave_0_agent_rdata_fifo_src_data;                           // SevenSegDecoder_1_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          sevensegdecoder_1_avalon_slave_0_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_004:in_0_ready -> SevenSegDecoder_1_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                    // avalon_st_adapter_004:out_0_valid -> SevenSegDecoder_1_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                     // avalon_st_adapter_004:out_0_data -> SevenSegDecoder_1_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                    // SevenSegDecoder_1_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                    // avalon_st_adapter_004:out_0_error -> SevenSegDecoder_1_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          sevensegdecoder_2_avalon_slave_0_agent_rdata_fifo_src_valid;                          // SevenSegDecoder_2_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] sevensegdecoder_2_avalon_slave_0_agent_rdata_fifo_src_data;                           // SevenSegDecoder_2_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          sevensegdecoder_2_avalon_slave_0_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_005:in_0_ready -> SevenSegDecoder_2_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                    // avalon_st_adapter_005:out_0_valid -> SevenSegDecoder_2_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                     // avalon_st_adapter_005:out_0_data -> SevenSegDecoder_2_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                    // SevenSegDecoder_2_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                    // avalon_st_adapter_005:out_0_error -> SevenSegDecoder_2_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          sevensegdecoder_4_avalon_slave_0_agent_rdata_fifo_src_valid;                          // SevenSegDecoder_4_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] sevensegdecoder_4_avalon_slave_0_agent_rdata_fifo_src_data;                           // SevenSegDecoder_4_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          sevensegdecoder_4_avalon_slave_0_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_006:in_0_ready -> SevenSegDecoder_4_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                    // avalon_st_adapter_006:out_0_valid -> SevenSegDecoder_4_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                     // avalon_st_adapter_006:out_0_data -> SevenSegDecoder_4_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                    // SevenSegDecoder_4_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                    // avalon_st_adapter_006:out_0_error -> SevenSegDecoder_4_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          sevensegdecoder_5_avalon_slave_0_agent_rdata_fifo_src_valid;                          // SevenSegDecoder_5_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] sevensegdecoder_5_avalon_slave_0_agent_rdata_fifo_src_data;                           // SevenSegDecoder_5_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          sevensegdecoder_5_avalon_slave_0_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_007:in_0_ready -> SevenSegDecoder_5_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                    // avalon_st_adapter_007:out_0_valid -> SevenSegDecoder_5_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                     // avalon_st_adapter_007:out_0_data -> SevenSegDecoder_5_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                    // SevenSegDecoder_5_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                    // avalon_st_adapter_007:out_0_error -> SevenSegDecoder_5_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          sevensegdecoder_3_avalon_slave_0_agent_rdata_fifo_src_valid;                          // SevenSegDecoder_3_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] sevensegdecoder_3_avalon_slave_0_agent_rdata_fifo_src_data;                           // SevenSegDecoder_3_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          sevensegdecoder_3_avalon_slave_0_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_008:in_0_ready -> SevenSegDecoder_3_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                    // avalon_st_adapter_008:out_0_valid -> SevenSegDecoder_3_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                     // avalon_st_adapter_008:out_0_data -> SevenSegDecoder_3_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                    // SevenSegDecoder_3_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                    // avalon_st_adapter_008:out_0_error -> SevenSegDecoder_3_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          sevensegdecoder_0_avalon_slave_0_agent_rdata_fifo_src_valid;                          // SevenSegDecoder_0_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] sevensegdecoder_0_avalon_slave_0_agent_rdata_fifo_src_data;                           // SevenSegDecoder_0_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          sevensegdecoder_0_avalon_slave_0_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_009:in_0_ready -> SevenSegDecoder_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                    // avalon_st_adapter_009:out_0_valid -> SevenSegDecoder_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                     // avalon_st_adapter_009:out_0_data -> SevenSegDecoder_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                    // SevenSegDecoder_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                    // avalon_st_adapter_009:out_0_error -> SevenSegDecoder_0_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          cst455_midterm_debug_mem_slave_agent_rdata_fifo_src_valid;                            // CST455_Midterm_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] cst455_midterm_debug_mem_slave_agent_rdata_fifo_src_data;                             // CST455_Midterm_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          cst455_midterm_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_010:in_0_ready -> CST455_Midterm_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                    // avalon_st_adapter_010:out_0_valid -> CST455_Midterm_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                     // avalon_st_adapter_010:out_0_data -> CST455_Midterm_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                    // CST455_Midterm_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                    // avalon_st_adapter_010:out_0_error -> CST455_Midterm_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                                  // SDRAM_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_out_data;                                                   // SDRAM_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                                  // avalon_st_adapter_011:in_0_ready -> SDRAM_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                    // avalon_st_adapter_011:out_0_valid -> SDRAM_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_011_out_0_data;                                                     // avalon_st_adapter_011:out_0_data -> SDRAM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                    // SDRAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                    // avalon_st_adapter_011:out_0_error -> SDRAM_s1_agent:rdata_fifo_sink_error
	wire          sys_clk_s1_agent_rdata_fifo_src_valid;                                                // sys_clk_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] sys_clk_s1_agent_rdata_fifo_src_data;                                                 // sys_clk_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          sys_clk_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_012:in_0_ready -> sys_clk_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                    // avalon_st_adapter_012:out_0_valid -> sys_clk_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                     // avalon_st_adapter_012:out_0_data -> sys_clk_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                    // sys_clk_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                    // avalon_st_adapter_012:out_0_error -> sys_clk_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) cst455_midterm_data_master_translator (
		.clk                    (CLOCKS_sys_clk_clk),                                                            //                       clk.clk
		.reset                  (CST455_Midterm_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (cst455_midterm_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cst455_midterm_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cst455_midterm_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cst455_midterm_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cst455_midterm_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cst455_midterm_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cst455_midterm_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cst455_midterm_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cst455_midterm_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cst455_midterm_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cst455_midterm_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CST455_Midterm_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CST455_Midterm_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (CST455_Midterm_data_master_byteenable),                                         //                          .byteenable
		.av_read                (CST455_Midterm_data_master_read),                                               //                          .read
		.av_readdata            (CST455_Midterm_data_master_readdata),                                           //                          .readdata
		.av_write               (CST455_Midterm_data_master_write),                                              //                          .write
		.av_writedata           (CST455_Midterm_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (CST455_Midterm_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_readdatavalid       (),                                                                              //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cst455_midterm_instruction_master_translator (
		.clk                    (CLOCKS_sys_clk_clk),                                                                   //                       clk.clk
		.reset                  (CST455_Midterm_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (cst455_midterm_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cst455_midterm_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cst455_midterm_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cst455_midterm_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cst455_midterm_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cst455_midterm_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cst455_midterm_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cst455_midterm_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cst455_midterm_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cst455_midterm_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cst455_midterm_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CST455_Midterm_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CST455_Midterm_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (CST455_Midterm_instruction_master_read),                                               //                          .read
		.av_readdata            (CST455_Midterm_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                                 //               (terminated)
		.av_byteenable          (4'b1111),                                                                              //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                                 //               (terminated)
		.av_readdatavalid       (),                                                                                     //               (terminated)
		.av_write               (1'b0),                                                                                 //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                                 //               (terminated)
		.av_lock                (1'b0),                                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                                 //               (terminated)
		.uav_clken              (),                                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                                //               (terminated)
		.av_response            (),                                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                                      //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) debug_avalon_jtag_slave_translator (
		.clk                    (CLOCKS_sys_clk_clk),                               //                      clk.clk
		.reset                  (CST455_Midterm_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (debug_avalon_jtag_slave_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (debug_avalon_jtag_slave_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (debug_avalon_jtag_slave_agent_m0_read),            //                         .read
		.uav_write              (debug_avalon_jtag_slave_agent_m0_write),           //                         .write
		.uav_waitrequest        (debug_avalon_jtag_slave_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (debug_avalon_jtag_slave_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (debug_avalon_jtag_slave_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (debug_avalon_jtag_slave_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (debug_avalon_jtag_slave_agent_m0_writedata),       //                         .writedata
		.uav_lock               (debug_avalon_jtag_slave_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (debug_avalon_jtag_slave_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (DEBUG_avalon_jtag_slave_address),                  //      avalon_anti_slave_0.address
		.av_write               (DEBUG_avalon_jtag_slave_write),                    //                         .write
		.av_read                (DEBUG_avalon_jtag_slave_read),                     //                         .read
		.av_readdata            (DEBUG_avalon_jtag_slave_readdata),                 //                         .readdata
		.av_writedata           (DEBUG_avalon_jtag_slave_writedata),                //                         .writedata
		.av_waitrequest         (DEBUG_avalon_jtag_slave_waitrequest),              //                         .waitrequest
		.av_chipselect          (DEBUG_avalon_jtag_slave_chipselect),               //                         .chipselect
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) leds_0_avalon_slave_0_translator (
		.clk                    (CLOCKS_sys_clk_clk),                               //                      clk.clk
		.reset                  (CST455_Midterm_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (leds_0_avalon_slave_0_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (leds_0_avalon_slave_0_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (leds_0_avalon_slave_0_agent_m0_read),              //                         .read
		.uav_write              (leds_0_avalon_slave_0_agent_m0_write),             //                         .write
		.uav_waitrequest        (leds_0_avalon_slave_0_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (leds_0_avalon_slave_0_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (leds_0_avalon_slave_0_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (leds_0_avalon_slave_0_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (leds_0_avalon_slave_0_agent_m0_writedata),         //                         .writedata
		.uav_lock               (leds_0_avalon_slave_0_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (leds_0_avalon_slave_0_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (LEDs_0_avalon_slave_0_address),                    //      avalon_anti_slave_0.address
		.av_write               (LEDs_0_avalon_slave_0_write),                      //                         .write
		.av_read                (LEDs_0_avalon_slave_0_read),                       //                         .read
		.av_readdata            (LEDs_0_avalon_slave_0_readdata),                   //                         .readdata
		.av_writedata           (LEDs_0_avalon_slave_0_writedata),                  //                         .writedata
		.av_chipselect          (LEDs_0_avalon_slave_0_chipselect),                 //                         .chipselect
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) switches_0_avalon_slave_0_translator (
		.clk                    (CLOCKS_sys_clk_clk),                               //                      clk.clk
		.reset                  (CST455_Midterm_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (switches_0_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (switches_0_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (switches_0_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (switches_0_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (switches_0_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (switches_0_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (switches_0_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (switches_0_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (switches_0_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (switches_0_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (switches_0_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Switches_0_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_read                (Switches_0_avalon_slave_0_read),                   //                         .read
		.av_readdata            (Switches_0_avalon_slave_0_readdata),               //                         .readdata
		.av_chipselect          (Switches_0_avalon_slave_0_chipselect),             //                         .chipselect
		.av_write               (),                                                 //              (terminated)
		.av_writedata           (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pushbuttons_0_avalon_slave_0_translator (
		.clk                    (CLOCKS_sys_clk_clk),                                  //                      clk.clk
		.reset                  (CST455_Midterm_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (pushbuttons_0_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pushbuttons_0_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pushbuttons_0_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (pushbuttons_0_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (pushbuttons_0_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pushbuttons_0_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pushbuttons_0_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pushbuttons_0_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pushbuttons_0_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pushbuttons_0_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pushbuttons_0_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Pushbuttons_0_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_read                (Pushbuttons_0_avalon_slave_0_read),                   //                         .read
		.av_readdata            (Pushbuttons_0_avalon_slave_0_readdata),               //                         .readdata
		.av_chipselect          (Pushbuttons_0_avalon_slave_0_chipselect),             //                         .chipselect
		.av_write               (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sevensegdecoder_1_avalon_slave_0_translator (
		.clk                    (CLOCKS_sys_clk_clk),                                      //                      clk.clk
		.reset                  (CST455_Midterm_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (sevensegdecoder_1_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sevensegdecoder_1_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sevensegdecoder_1_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (sevensegdecoder_1_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (sevensegdecoder_1_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sevensegdecoder_1_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sevensegdecoder_1_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sevensegdecoder_1_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sevensegdecoder_1_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sevensegdecoder_1_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sevensegdecoder_1_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (SevenSegDecoder_1_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (SevenSegDecoder_1_avalon_slave_0_write),                  //                         .write
		.av_readdata            (SevenSegDecoder_1_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (SevenSegDecoder_1_avalon_slave_0_writedata),              //                         .writedata
		.av_chipselect          (SevenSegDecoder_1_avalon_slave_0_chipselect),             //                         .chipselect
		.av_read                (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sevensegdecoder_2_avalon_slave_0_translator (
		.clk                    (CLOCKS_sys_clk_clk),                                      //                      clk.clk
		.reset                  (CST455_Midterm_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (sevensegdecoder_2_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sevensegdecoder_2_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sevensegdecoder_2_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (sevensegdecoder_2_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (sevensegdecoder_2_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sevensegdecoder_2_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sevensegdecoder_2_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sevensegdecoder_2_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sevensegdecoder_2_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sevensegdecoder_2_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sevensegdecoder_2_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (SevenSegDecoder_2_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (SevenSegDecoder_2_avalon_slave_0_write),                  //                         .write
		.av_readdata            (SevenSegDecoder_2_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (SevenSegDecoder_2_avalon_slave_0_writedata),              //                         .writedata
		.av_chipselect          (SevenSegDecoder_2_avalon_slave_0_chipselect),             //                         .chipselect
		.av_read                (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sevensegdecoder_4_avalon_slave_0_translator (
		.clk                    (CLOCKS_sys_clk_clk),                                      //                      clk.clk
		.reset                  (CST455_Midterm_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (sevensegdecoder_4_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sevensegdecoder_4_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sevensegdecoder_4_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (sevensegdecoder_4_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (sevensegdecoder_4_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sevensegdecoder_4_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sevensegdecoder_4_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sevensegdecoder_4_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sevensegdecoder_4_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sevensegdecoder_4_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sevensegdecoder_4_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (SevenSegDecoder_4_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (SevenSegDecoder_4_avalon_slave_0_write),                  //                         .write
		.av_readdata            (SevenSegDecoder_4_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (SevenSegDecoder_4_avalon_slave_0_writedata),              //                         .writedata
		.av_chipselect          (SevenSegDecoder_4_avalon_slave_0_chipselect),             //                         .chipselect
		.av_read                (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sevensegdecoder_5_avalon_slave_0_translator (
		.clk                    (CLOCKS_sys_clk_clk),                                      //                      clk.clk
		.reset                  (CST455_Midterm_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (sevensegdecoder_5_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sevensegdecoder_5_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sevensegdecoder_5_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (sevensegdecoder_5_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (sevensegdecoder_5_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sevensegdecoder_5_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sevensegdecoder_5_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sevensegdecoder_5_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sevensegdecoder_5_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sevensegdecoder_5_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sevensegdecoder_5_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (SevenSegDecoder_5_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (SevenSegDecoder_5_avalon_slave_0_write),                  //                         .write
		.av_readdata            (SevenSegDecoder_5_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (SevenSegDecoder_5_avalon_slave_0_writedata),              //                         .writedata
		.av_chipselect          (SevenSegDecoder_5_avalon_slave_0_chipselect),             //                         .chipselect
		.av_read                (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sevensegdecoder_3_avalon_slave_0_translator (
		.clk                    (CLOCKS_sys_clk_clk),                                      //                      clk.clk
		.reset                  (CST455_Midterm_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (sevensegdecoder_3_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sevensegdecoder_3_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sevensegdecoder_3_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (sevensegdecoder_3_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (sevensegdecoder_3_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sevensegdecoder_3_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sevensegdecoder_3_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sevensegdecoder_3_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sevensegdecoder_3_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sevensegdecoder_3_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sevensegdecoder_3_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (SevenSegDecoder_3_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (SevenSegDecoder_3_avalon_slave_0_write),                  //                         .write
		.av_readdata            (SevenSegDecoder_3_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (SevenSegDecoder_3_avalon_slave_0_writedata),              //                         .writedata
		.av_chipselect          (SevenSegDecoder_3_avalon_slave_0_chipselect),             //                         .chipselect
		.av_read                (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sevensegdecoder_0_avalon_slave_0_translator (
		.clk                    (CLOCKS_sys_clk_clk),                                      //                      clk.clk
		.reset                  (CST455_Midterm_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (sevensegdecoder_0_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sevensegdecoder_0_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sevensegdecoder_0_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (sevensegdecoder_0_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (sevensegdecoder_0_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sevensegdecoder_0_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sevensegdecoder_0_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sevensegdecoder_0_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sevensegdecoder_0_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sevensegdecoder_0_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sevensegdecoder_0_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (SevenSegDecoder_0_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (SevenSegDecoder_0_avalon_slave_0_write),                  //                         .write
		.av_readdata            (SevenSegDecoder_0_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (SevenSegDecoder_0_avalon_slave_0_writedata),              //                         .writedata
		.av_chipselect          (SevenSegDecoder_0_avalon_slave_0_chipselect),             //                         .chipselect
		.av_read                (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cst455_midterm_debug_mem_slave_translator (
		.clk                    (CLOCKS_sys_clk_clk),                                    //                      clk.clk
		.reset                  (CST455_Midterm_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cst455_midterm_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cst455_midterm_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cst455_midterm_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (cst455_midterm_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (cst455_midterm_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cst455_midterm_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cst455_midterm_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cst455_midterm_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cst455_midterm_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cst455_midterm_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cst455_midterm_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (CST455_Midterm_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (CST455_Midterm_debug_mem_slave_write),                  //                         .write
		.av_read                (CST455_Midterm_debug_mem_slave_read),                   //                         .read
		.av_readdata            (CST455_Midterm_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (CST455_Midterm_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (CST455_Midterm_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (CST455_Midterm_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (CST455_Midterm_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (CLOCKS_sys_clk_clk),                               //                      clk.clk
		.reset                  (CST455_Midterm_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                           //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (SDRAM_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (SDRAM_s1_write),                                   //                         .write
		.av_read                (SDRAM_s1_read),                                    //                         .read
		.av_readdata            (SDRAM_s1_readdata),                                //                         .readdata
		.av_writedata           (SDRAM_s1_writedata),                               //                         .writedata
		.av_byteenable          (SDRAM_s1_byteenable),                              //                         .byteenable
		.av_readdatavalid       (SDRAM_s1_readdatavalid),                           //                         .readdatavalid
		.av_waitrequest         (SDRAM_s1_waitrequest),                             //                         .waitrequest
		.av_chipselect          (SDRAM_s1_chipselect),                              //                         .chipselect
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sys_clk_s1_translator (
		.clk                    (CLOCKS_sys_clk_clk),                               //                      clk.clk
		.reset                  (CST455_Midterm_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sys_clk_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (sys_clk_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (sys_clk_s1_agent_m0_read),                         //                         .read
		.uav_write              (sys_clk_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (sys_clk_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (sys_clk_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (sys_clk_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (sys_clk_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (sys_clk_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (sys_clk_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (sys_clk_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (sys_clk_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (sys_clk_s1_write),                                 //                         .write
		.av_readdata            (sys_clk_s1_readdata),                              //                         .readdata
		.av_writedata           (sys_clk_s1_writedata),                             //                         .writedata
		.av_chipselect          (sys_clk_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (89),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cst455_midterm_data_master_agent (
		.clk                   (CLOCKS_sys_clk_clk),                                                            //       clk.clk
		.reset                 (CST455_Midterm_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (cst455_midterm_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cst455_midterm_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cst455_midterm_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cst455_midterm_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cst455_midterm_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cst455_midterm_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cst455_midterm_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cst455_midterm_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cst455_midterm_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cst455_midterm_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cst455_midterm_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cst455_midterm_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cst455_midterm_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cst455_midterm_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cst455_midterm_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cst455_midterm_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                             //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                              //          .data
		.rp_channel            (rsp_mux_src_channel),                                                           //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                     //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                       //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                             //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (89),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cst455_midterm_instruction_master_agent (
		.clk                   (CLOCKS_sys_clk_clk),                                                                   //       clk.clk
		.reset                 (CST455_Midterm_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (cst455_midterm_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cst455_midterm_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cst455_midterm_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cst455_midterm_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cst455_midterm_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cst455_midterm_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cst455_midterm_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cst455_midterm_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cst455_midterm_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cst455_midterm_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cst455_midterm_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cst455_midterm_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cst455_midterm_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cst455_midterm_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cst455_midterm_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cst455_midterm_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                                //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                                 //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                              //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                          //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                                //          .ready
		.av_response           (),                                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) debug_avalon_jtag_slave_agent (
		.clk                     (CLOCKS_sys_clk_clk),                                       //             clk.clk
		.reset                   (CST455_Midterm_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (debug_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (debug_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (debug_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (debug_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (debug_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (debug_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (debug_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (debug_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (debug_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (debug_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (debug_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (debug_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (debug_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (debug_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (debug_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (debug_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                      //                .channel
		.rf_sink_ready           (debug_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (debug_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (debug_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (debug_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (debug_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (debug_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (debug_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (debug_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (debug_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (debug_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (debug_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (debug_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (debug_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) debug_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (CLOCKS_sys_clk_clk),                                       //       clk.clk
		.reset             (CST455_Midterm_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (debug_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (debug_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (debug_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (debug_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (debug_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (debug_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (debug_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (debug_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (debug_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (debug_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) leds_0_avalon_slave_0_agent (
		.clk                     (CLOCKS_sys_clk_clk),                                     //             clk.clk
		.reset                   (CST455_Midterm_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (leds_0_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (leds_0_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (leds_0_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (leds_0_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (leds_0_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (leds_0_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (leds_0_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (leds_0_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (leds_0_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (leds_0_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (leds_0_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (leds_0_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (leds_0_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (leds_0_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (leds_0_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (leds_0_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                //                .channel
		.rf_sink_ready           (leds_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (leds_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (leds_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (leds_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (leds_0_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (leds_0_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (leds_0_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (leds_0_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (leds_0_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (leds_0_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (leds_0_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (leds_0_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (leds_0_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (CLOCKS_sys_clk_clk),                                     //       clk.clk
		.reset             (CST455_Midterm_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (leds_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (leds_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (leds_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (leds_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (leds_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (leds_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (leds_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (leds_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (leds_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (leds_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) switches_0_avalon_slave_0_agent (
		.clk                     (CLOCKS_sys_clk_clk),                                         //             clk.clk
		.reset                   (CST455_Midterm_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (switches_0_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (switches_0_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (switches_0_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (switches_0_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (switches_0_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (switches_0_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (switches_0_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (switches_0_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (switches_0_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (switches_0_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (switches_0_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (switches_0_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (switches_0_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (switches_0_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (switches_0_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (switches_0_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                    //                .channel
		.rf_sink_ready           (switches_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (switches_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (switches_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (switches_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (switches_0_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (switches_0_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (switches_0_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (switches_0_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (switches_0_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (switches_0_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (switches_0_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (switches_0_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (switches_0_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) switches_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (CLOCKS_sys_clk_clk),                                         //       clk.clk
		.reset             (CST455_Midterm_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (switches_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (switches_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (switches_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (switches_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (switches_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (switches_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (switches_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (switches_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (switches_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (switches_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pushbuttons_0_avalon_slave_0_agent (
		.clk                     (CLOCKS_sys_clk_clk),                                            //             clk.clk
		.reset                   (CST455_Midterm_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (pushbuttons_0_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pushbuttons_0_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pushbuttons_0_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pushbuttons_0_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pushbuttons_0_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (pushbuttons_0_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pushbuttons_0_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pushbuttons_0_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (pushbuttons_0_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pushbuttons_0_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (pushbuttons_0_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (pushbuttons_0_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pushbuttons_0_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (pushbuttons_0_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (pushbuttons_0_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (pushbuttons_0_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                       //                .channel
		.rf_sink_ready           (pushbuttons_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pushbuttons_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pushbuttons_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pushbuttons_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pushbuttons_0_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pushbuttons_0_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pushbuttons_0_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pushbuttons_0_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pushbuttons_0_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pushbuttons_0_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (pushbuttons_0_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pushbuttons_0_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pushbuttons_0_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pushbuttons_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (CLOCKS_sys_clk_clk),                                            //       clk.clk
		.reset             (CST455_Midterm_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (pushbuttons_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (pushbuttons_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (pushbuttons_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pushbuttons_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pushbuttons_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pushbuttons_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pushbuttons_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pushbuttons_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pushbuttons_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pushbuttons_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sevensegdecoder_1_avalon_slave_0_agent (
		.clk                     (CLOCKS_sys_clk_clk),                                                //             clk.clk
		.reset                   (CST455_Midterm_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (sevensegdecoder_1_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sevensegdecoder_1_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sevensegdecoder_1_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sevensegdecoder_1_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sevensegdecoder_1_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sevensegdecoder_1_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sevensegdecoder_1_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sevensegdecoder_1_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sevensegdecoder_1_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sevensegdecoder_1_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sevensegdecoder_1_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sevensegdecoder_1_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sevensegdecoder_1_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sevensegdecoder_1_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sevensegdecoder_1_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sevensegdecoder_1_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                             //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                             //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                              //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                       //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                           //                .channel
		.rf_sink_ready           (sevensegdecoder_1_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sevensegdecoder_1_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sevensegdecoder_1_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sevensegdecoder_1_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sevensegdecoder_1_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sevensegdecoder_1_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sevensegdecoder_1_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sevensegdecoder_1_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sevensegdecoder_1_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sevensegdecoder_1_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (sevensegdecoder_1_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sevensegdecoder_1_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sevensegdecoder_1_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sevensegdecoder_1_avalon_slave_0_agent_rsp_fifo (
		.clk               (CLOCKS_sys_clk_clk),                                                //       clk.clk
		.reset             (CST455_Midterm_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (sevensegdecoder_1_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sevensegdecoder_1_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sevensegdecoder_1_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sevensegdecoder_1_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sevensegdecoder_1_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sevensegdecoder_1_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sevensegdecoder_1_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sevensegdecoder_1_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sevensegdecoder_1_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sevensegdecoder_1_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sevensegdecoder_2_avalon_slave_0_agent (
		.clk                     (CLOCKS_sys_clk_clk),                                                //             clk.clk
		.reset                   (CST455_Midterm_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (sevensegdecoder_2_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sevensegdecoder_2_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sevensegdecoder_2_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sevensegdecoder_2_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sevensegdecoder_2_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sevensegdecoder_2_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sevensegdecoder_2_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sevensegdecoder_2_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sevensegdecoder_2_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sevensegdecoder_2_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sevensegdecoder_2_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sevensegdecoder_2_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sevensegdecoder_2_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sevensegdecoder_2_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sevensegdecoder_2_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sevensegdecoder_2_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                             //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                             //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                              //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                       //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                           //                .channel
		.rf_sink_ready           (sevensegdecoder_2_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sevensegdecoder_2_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sevensegdecoder_2_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sevensegdecoder_2_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sevensegdecoder_2_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sevensegdecoder_2_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sevensegdecoder_2_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sevensegdecoder_2_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sevensegdecoder_2_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sevensegdecoder_2_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (sevensegdecoder_2_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sevensegdecoder_2_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sevensegdecoder_2_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sevensegdecoder_2_avalon_slave_0_agent_rsp_fifo (
		.clk               (CLOCKS_sys_clk_clk),                                                //       clk.clk
		.reset             (CST455_Midterm_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (sevensegdecoder_2_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sevensegdecoder_2_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sevensegdecoder_2_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sevensegdecoder_2_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sevensegdecoder_2_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sevensegdecoder_2_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sevensegdecoder_2_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sevensegdecoder_2_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sevensegdecoder_2_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sevensegdecoder_2_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sevensegdecoder_4_avalon_slave_0_agent (
		.clk                     (CLOCKS_sys_clk_clk),                                                //             clk.clk
		.reset                   (CST455_Midterm_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (sevensegdecoder_4_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sevensegdecoder_4_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sevensegdecoder_4_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sevensegdecoder_4_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sevensegdecoder_4_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sevensegdecoder_4_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sevensegdecoder_4_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sevensegdecoder_4_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sevensegdecoder_4_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sevensegdecoder_4_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sevensegdecoder_4_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sevensegdecoder_4_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sevensegdecoder_4_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sevensegdecoder_4_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sevensegdecoder_4_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sevensegdecoder_4_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                             //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                             //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                              //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                       //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                           //                .channel
		.rf_sink_ready           (sevensegdecoder_4_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sevensegdecoder_4_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sevensegdecoder_4_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sevensegdecoder_4_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sevensegdecoder_4_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sevensegdecoder_4_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sevensegdecoder_4_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sevensegdecoder_4_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sevensegdecoder_4_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sevensegdecoder_4_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (sevensegdecoder_4_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sevensegdecoder_4_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sevensegdecoder_4_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sevensegdecoder_4_avalon_slave_0_agent_rsp_fifo (
		.clk               (CLOCKS_sys_clk_clk),                                                //       clk.clk
		.reset             (CST455_Midterm_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (sevensegdecoder_4_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sevensegdecoder_4_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sevensegdecoder_4_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sevensegdecoder_4_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sevensegdecoder_4_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sevensegdecoder_4_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sevensegdecoder_4_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sevensegdecoder_4_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sevensegdecoder_4_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sevensegdecoder_4_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sevensegdecoder_5_avalon_slave_0_agent (
		.clk                     (CLOCKS_sys_clk_clk),                                                //             clk.clk
		.reset                   (CST455_Midterm_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (sevensegdecoder_5_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sevensegdecoder_5_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sevensegdecoder_5_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sevensegdecoder_5_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sevensegdecoder_5_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sevensegdecoder_5_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sevensegdecoder_5_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sevensegdecoder_5_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sevensegdecoder_5_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sevensegdecoder_5_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sevensegdecoder_5_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sevensegdecoder_5_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sevensegdecoder_5_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sevensegdecoder_5_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sevensegdecoder_5_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sevensegdecoder_5_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                             //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                             //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                              //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                                       //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                           //                .channel
		.rf_sink_ready           (sevensegdecoder_5_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sevensegdecoder_5_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sevensegdecoder_5_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sevensegdecoder_5_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sevensegdecoder_5_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sevensegdecoder_5_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sevensegdecoder_5_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sevensegdecoder_5_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sevensegdecoder_5_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sevensegdecoder_5_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (sevensegdecoder_5_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sevensegdecoder_5_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sevensegdecoder_5_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sevensegdecoder_5_avalon_slave_0_agent_rsp_fifo (
		.clk               (CLOCKS_sys_clk_clk),                                                //       clk.clk
		.reset             (CST455_Midterm_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (sevensegdecoder_5_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sevensegdecoder_5_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sevensegdecoder_5_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sevensegdecoder_5_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sevensegdecoder_5_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sevensegdecoder_5_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sevensegdecoder_5_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sevensegdecoder_5_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sevensegdecoder_5_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sevensegdecoder_5_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sevensegdecoder_3_avalon_slave_0_agent (
		.clk                     (CLOCKS_sys_clk_clk),                                                //             clk.clk
		.reset                   (CST455_Midterm_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (sevensegdecoder_3_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sevensegdecoder_3_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sevensegdecoder_3_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sevensegdecoder_3_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sevensegdecoder_3_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sevensegdecoder_3_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sevensegdecoder_3_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sevensegdecoder_3_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sevensegdecoder_3_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sevensegdecoder_3_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sevensegdecoder_3_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sevensegdecoder_3_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sevensegdecoder_3_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sevensegdecoder_3_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sevensegdecoder_3_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sevensegdecoder_3_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                             //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                             //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                              //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                                       //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                           //                .channel
		.rf_sink_ready           (sevensegdecoder_3_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sevensegdecoder_3_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sevensegdecoder_3_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sevensegdecoder_3_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sevensegdecoder_3_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sevensegdecoder_3_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sevensegdecoder_3_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sevensegdecoder_3_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sevensegdecoder_3_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sevensegdecoder_3_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (sevensegdecoder_3_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sevensegdecoder_3_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sevensegdecoder_3_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sevensegdecoder_3_avalon_slave_0_agent_rsp_fifo (
		.clk               (CLOCKS_sys_clk_clk),                                                //       clk.clk
		.reset             (CST455_Midterm_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (sevensegdecoder_3_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sevensegdecoder_3_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sevensegdecoder_3_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sevensegdecoder_3_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sevensegdecoder_3_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sevensegdecoder_3_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sevensegdecoder_3_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sevensegdecoder_3_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sevensegdecoder_3_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sevensegdecoder_3_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sevensegdecoder_0_avalon_slave_0_agent (
		.clk                     (CLOCKS_sys_clk_clk),                                                //             clk.clk
		.reset                   (CST455_Midterm_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (sevensegdecoder_0_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sevensegdecoder_0_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sevensegdecoder_0_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sevensegdecoder_0_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sevensegdecoder_0_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sevensegdecoder_0_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sevensegdecoder_0_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sevensegdecoder_0_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sevensegdecoder_0_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sevensegdecoder_0_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sevensegdecoder_0_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sevensegdecoder_0_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sevensegdecoder_0_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sevensegdecoder_0_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sevensegdecoder_0_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sevensegdecoder_0_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                             //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                             //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                              //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                                       //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                           //                .channel
		.rf_sink_ready           (sevensegdecoder_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sevensegdecoder_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sevensegdecoder_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sevensegdecoder_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sevensegdecoder_0_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sevensegdecoder_0_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sevensegdecoder_0_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sevensegdecoder_0_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sevensegdecoder_0_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sevensegdecoder_0_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (sevensegdecoder_0_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sevensegdecoder_0_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sevensegdecoder_0_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sevensegdecoder_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (CLOCKS_sys_clk_clk),                                                //       clk.clk
		.reset             (CST455_Midterm_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (sevensegdecoder_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sevensegdecoder_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sevensegdecoder_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sevensegdecoder_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sevensegdecoder_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sevensegdecoder_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sevensegdecoder_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sevensegdecoder_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sevensegdecoder_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sevensegdecoder_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cst455_midterm_debug_mem_slave_agent (
		.clk                     (CLOCKS_sys_clk_clk),                                              //             clk.clk
		.reset                   (CST455_Midterm_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cst455_midterm_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cst455_midterm_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cst455_midterm_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cst455_midterm_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cst455_midterm_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (cst455_midterm_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cst455_midterm_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cst455_midterm_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (cst455_midterm_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cst455_midterm_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (cst455_midterm_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (cst455_midterm_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cst455_midterm_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (cst455_midterm_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (cst455_midterm_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (cst455_midterm_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                         //                .channel
		.rf_sink_ready           (cst455_midterm_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cst455_midterm_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cst455_midterm_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cst455_midterm_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cst455_midterm_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cst455_midterm_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cst455_midterm_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cst455_midterm_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cst455_midterm_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cst455_midterm_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (cst455_midterm_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cst455_midterm_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cst455_midterm_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cst455_midterm_debug_mem_slave_agent_rsp_fifo (
		.clk               (CLOCKS_sys_clk_clk),                                              //       clk.clk
		.reset             (CST455_Midterm_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cst455_midterm_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (cst455_midterm_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (cst455_midterm_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cst455_midterm_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cst455_midterm_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cst455_midterm_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cst455_midterm_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cst455_midterm_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cst455_midterm_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cst455_midterm_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (71),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (CLOCKS_sys_clk_clk),                               //             clk.clk
		.reset                   (CST455_Midterm_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),             //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),             //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),              //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket),     //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),       //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),           //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset             (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset             (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sys_clk_s1_agent (
		.clk                     (CLOCKS_sys_clk_clk),                               //             clk.clk
		.reset                   (CST455_Midterm_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sys_clk_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (sys_clk_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (sys_clk_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (sys_clk_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (sys_clk_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (sys_clk_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (sys_clk_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (sys_clk_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (sys_clk_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (sys_clk_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (sys_clk_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (sys_clk_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (sys_clk_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (sys_clk_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (sys_clk_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (sys_clk_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_012_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                          //                .channel
		.rf_sink_ready           (sys_clk_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (sys_clk_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (sys_clk_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (sys_clk_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (sys_clk_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (sys_clk_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (sys_clk_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (sys_clk_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (sys_clk_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (sys_clk_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                //                .error
		.rdata_fifo_src_ready    (sys_clk_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sys_clk_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (sys_clk_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_clk_s1_agent_rsp_fifo (
		.clk               (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset             (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sys_clk_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (sys_clk_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (sys_clk_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (sys_clk_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (sys_clk_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (sys_clk_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (sys_clk_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (sys_clk_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (sys_clk_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (sys_clk_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	CST455_Midterm_mm_interconnect_0_router router (
		.sink_ready         (cst455_midterm_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cst455_midterm_data_master_agent_cp_valid),         //          .valid
		.sink_data          (cst455_midterm_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (cst455_midterm_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cst455_midterm_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (CLOCKS_sys_clk_clk),                                //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                                  //       src.ready
		.src_valid          (router_src_valid),                                  //          .valid
		.src_data           (router_src_data),                                   //          .data
		.src_channel        (router_src_channel),                                //          .channel
		.src_startofpacket  (router_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                             //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (cst455_midterm_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cst455_midterm_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cst455_midterm_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cst455_midterm_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cst455_midterm_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (CLOCKS_sys_clk_clk),                                       //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                                     //       src.ready
		.src_valid          (router_001_src_valid),                                     //          .valid
		.src_data           (router_001_src_data),                                      //          .data
		.src_channel        (router_001_src_channel),                                   //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (debug_avalon_jtag_slave_agent_rp_ready),           //      sink.ready
		.sink_valid         (debug_avalon_jtag_slave_agent_rp_valid),           //          .valid
		.sink_data          (debug_avalon_jtag_slave_agent_rp_data),            //          .data
		.sink_startofpacket (debug_avalon_jtag_slave_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (debug_avalon_jtag_slave_agent_rp_endofpacket),     //          .endofpacket
		.clk                (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                             //       src.ready
		.src_valid          (router_002_src_valid),                             //          .valid
		.src_data           (router_002_src_data),                              //          .data
		.src_channel        (router_002_src_channel),                           //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                        //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (leds_0_avalon_slave_0_agent_rp_ready),             //      sink.ready
		.sink_valid         (leds_0_avalon_slave_0_agent_rp_valid),             //          .valid
		.sink_data          (leds_0_avalon_slave_0_agent_rp_data),              //          .data
		.sink_startofpacket (leds_0_avalon_slave_0_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (leds_0_avalon_slave_0_agent_rp_endofpacket),       //          .endofpacket
		.clk                (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                             //       src.ready
		.src_valid          (router_003_src_valid),                             //          .valid
		.src_data           (router_003_src_data),                              //          .data
		.src_channel        (router_003_src_channel),                           //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                        //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (switches_0_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (switches_0_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (switches_0_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (switches_0_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (switches_0_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                             //       src.ready
		.src_valid          (router_004_src_valid),                             //          .valid
		.src_data           (router_004_src_data),                              //          .data
		.src_channel        (router_004_src_channel),                           //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                        //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (pushbuttons_0_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (pushbuttons_0_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (pushbuttons_0_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (pushbuttons_0_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pushbuttons_0_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (CLOCKS_sys_clk_clk),                                  //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_005_src_ready),                                //       src.ready
		.src_valid          (router_005_src_valid),                                //          .valid
		.src_data           (router_005_src_data),                                 //          .data
		.src_channel        (router_005_src_channel),                              //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                           //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (sevensegdecoder_1_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sevensegdecoder_1_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sevensegdecoder_1_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sevensegdecoder_1_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sevensegdecoder_1_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (CLOCKS_sys_clk_clk),                                      //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_006_src_ready),                                    //       src.ready
		.src_valid          (router_006_src_valid),                                    //          .valid
		.src_data           (router_006_src_data),                                     //          .data
		.src_channel        (router_006_src_channel),                                  //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                               //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (sevensegdecoder_2_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sevensegdecoder_2_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sevensegdecoder_2_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sevensegdecoder_2_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sevensegdecoder_2_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (CLOCKS_sys_clk_clk),                                      //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_007_src_ready),                                    //       src.ready
		.src_valid          (router_007_src_valid),                                    //          .valid
		.src_data           (router_007_src_data),                                     //          .data
		.src_channel        (router_007_src_channel),                                  //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                               //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (sevensegdecoder_4_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sevensegdecoder_4_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sevensegdecoder_4_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sevensegdecoder_4_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sevensegdecoder_4_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (CLOCKS_sys_clk_clk),                                      //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_008_src_ready),                                    //       src.ready
		.src_valid          (router_008_src_valid),                                    //          .valid
		.src_data           (router_008_src_data),                                     //          .data
		.src_channel        (router_008_src_channel),                                  //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                               //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (sevensegdecoder_5_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sevensegdecoder_5_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sevensegdecoder_5_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sevensegdecoder_5_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sevensegdecoder_5_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (CLOCKS_sys_clk_clk),                                      //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_009_src_ready),                                    //       src.ready
		.src_valid          (router_009_src_valid),                                    //          .valid
		.src_data           (router_009_src_data),                                     //          .data
		.src_channel        (router_009_src_channel),                                  //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                               //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_router_002 router_010 (
		.sink_ready         (sevensegdecoder_3_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sevensegdecoder_3_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sevensegdecoder_3_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sevensegdecoder_3_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sevensegdecoder_3_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (CLOCKS_sys_clk_clk),                                      //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_010_src_ready),                                    //       src.ready
		.src_valid          (router_010_src_valid),                                    //          .valid
		.src_data           (router_010_src_data),                                     //          .data
		.src_channel        (router_010_src_channel),                                  //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                               //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_router_002 router_011 (
		.sink_ready         (sevensegdecoder_0_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sevensegdecoder_0_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sevensegdecoder_0_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sevensegdecoder_0_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sevensegdecoder_0_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (CLOCKS_sys_clk_clk),                                      //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_011_src_ready),                                    //       src.ready
		.src_valid          (router_011_src_valid),                                    //          .valid
		.src_data           (router_011_src_data),                                     //          .data
		.src_channel        (router_011_src_channel),                                  //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                               //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_router_012 router_012 (
		.sink_ready         (cst455_midterm_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (cst455_midterm_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (cst455_midterm_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (cst455_midterm_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cst455_midterm_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (CLOCKS_sys_clk_clk),                                    //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_012_src_ready),                                  //       src.ready
		.src_valid          (router_012_src_valid),                                  //          .valid
		.src_data           (router_012_src_data),                                   //          .data
		.src_channel        (router_012_src_channel),                                //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                             //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_router_013 router_013 (
		.sink_ready         (sdram_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                          //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                             //       src.ready
		.src_valid          (router_013_src_valid),                             //          .valid
		.src_data           (router_013_src_data),                              //          .data
		.src_channel        (router_013_src_channel),                           //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                        //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_router_002 router_014 (
		.sink_ready         (sys_clk_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (sys_clk_s1_agent_rp_valid),                        //          .valid
		.sink_data          (sys_clk_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (sys_clk_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (sys_clk_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                             //       src.ready
		.src_valid          (router_014_src_valid),                             //          .valid
		.src_data           (router_014_src_data),                              //          .data
		.src_channel        (router_014_src_channel),                           //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                        //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (65),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_BURST_TYPE_H          (62),
		.PKT_BURST_TYPE_L          (61),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (55),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (88),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (53),
		.OUT_BURSTWRAP_H           (57),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (CLOCKS_sys_clk_clk),                               //       cr0.clk
		.reset                 (CST455_Midterm_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (sdram_s1_cmd_width_adapter_src_valid),             //     sink0.valid
		.sink0_data            (sdram_s1_cmd_width_adapter_src_data),              //          .data
		.sink0_channel         (sdram_s1_cmd_width_adapter_src_channel),           //          .channel
		.sink0_startofpacket   (sdram_s1_cmd_width_adapter_src_startofpacket),     //          .startofpacket
		.sink0_endofpacket     (sdram_s1_cmd_width_adapter_src_endofpacket),       //          .endofpacket
		.sink0_ready           (sdram_s1_cmd_width_adapter_src_ready),             //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),             //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),              //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),           //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),       //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)              //          .ready
	);

	CST455_Midterm_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset               (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                                 //      sink.ready
		.sink_channel        (router_src_channel),                               //          .channel
		.sink_data           (router_src_data),                                  //          .data
		.sink_startofpacket  (router_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                           //          .endofpacket
		.sink_valid          (router_src_valid),                                 //          .valid
		.src0_ready          (cmd_demux_src0_ready),                             //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                             //          .valid
		.src0_data           (cmd_demux_src0_data),                              //          .data
		.src0_channel        (cmd_demux_src0_channel),                           //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                       //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                             //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                             //          .valid
		.src1_data           (cmd_demux_src1_data),                              //          .data
		.src1_channel        (cmd_demux_src1_channel),                           //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                       //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                             //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                             //          .valid
		.src2_data           (cmd_demux_src2_data),                              //          .data
		.src2_channel        (cmd_demux_src2_channel),                           //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                       //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                             //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                             //          .valid
		.src3_data           (cmd_demux_src3_data),                              //          .data
		.src3_channel        (cmd_demux_src3_channel),                           //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                     //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                       //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                             //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                             //          .valid
		.src4_data           (cmd_demux_src4_data),                              //          .data
		.src4_channel        (cmd_demux_src4_channel),                           //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                     //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                       //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                             //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                             //          .valid
		.src5_data           (cmd_demux_src5_data),                              //          .data
		.src5_channel        (cmd_demux_src5_channel),                           //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                     //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                       //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                             //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                             //          .valid
		.src6_data           (cmd_demux_src6_data),                              //          .data
		.src6_channel        (cmd_demux_src6_channel),                           //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                     //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                       //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                             //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                             //          .valid
		.src7_data           (cmd_demux_src7_data),                              //          .data
		.src7_channel        (cmd_demux_src7_channel),                           //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                     //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                       //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                             //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                             //          .valid
		.src8_data           (cmd_demux_src8_data),                              //          .data
		.src8_channel        (cmd_demux_src8_channel),                           //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                     //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                       //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                             //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                             //          .valid
		.src9_data           (cmd_demux_src9_data),                              //          .data
		.src9_channel        (cmd_demux_src9_channel),                           //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                     //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                       //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                            //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                            //          .valid
		.src10_data          (cmd_demux_src10_data),                             //          .data
		.src10_channel       (cmd_demux_src10_channel),                          //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                    //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                      //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                            //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                            //          .valid
		.src11_data          (cmd_demux_src11_data),                             //          .data
		.src11_channel       (cmd_demux_src11_channel),                          //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                    //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                      //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                            //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                            //          .valid
		.src12_data          (cmd_demux_src12_data),                             //          .data
		.src12_channel       (cmd_demux_src12_channel),                          //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                    //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket)                       //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                             //      sink.ready
		.sink_channel       (router_001_src_channel),                           //          .channel
		.sink_data          (router_001_src_data),                              //          .data
		.sink_startofpacket (router_001_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_001_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_001_src0_data),                          //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                         //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                         //          .valid
		.src1_data          (cmd_demux_001_src1_data),                          //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                       //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                    //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset               (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_src_valid),                                //          .valid
		.src_data            (cmd_mux_src_data),                                 //          .data
		.src_channel         (cmd_mux_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                           //          .channel
		.sink0_data          (cmd_demux_src0_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                        //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset               (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                            //          .valid
		.src_data            (cmd_mux_001_src_data),                             //          .data
		.src_channel         (cmd_mux_001_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                           //          .channel
		.sink0_data          (cmd_demux_src1_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                        //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset               (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                            //          .valid
		.src_data            (cmd_mux_002_src_data),                             //          .data
		.src_channel         (cmd_mux_002_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                           //          .channel
		.sink0_data          (cmd_demux_src2_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                        //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset               (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                            //          .valid
		.src_data            (cmd_mux_003_src_data),                             //          .data
		.src_channel         (cmd_mux_003_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                           //          .channel
		.sink0_data          (cmd_demux_src3_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                        //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset               (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                            //          .valid
		.src_data            (cmd_mux_004_src_data),                             //          .data
		.src_channel         (cmd_mux_004_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                           //          .channel
		.sink0_data          (cmd_demux_src4_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                        //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset               (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                            //          .valid
		.src_data            (cmd_mux_005_src_data),                             //          .data
		.src_channel         (cmd_mux_005_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                           //          .channel
		.sink0_data          (cmd_demux_src5_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                        //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset               (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                            //          .valid
		.src_data            (cmd_mux_006_src_data),                             //          .data
		.src_channel         (cmd_mux_006_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                           //          .channel
		.sink0_data          (cmd_demux_src6_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                        //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset               (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                            //          .valid
		.src_data            (cmd_mux_007_src_data),                             //          .data
		.src_channel         (cmd_mux_007_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                           //          .channel
		.sink0_data          (cmd_demux_src7_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                        //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset               (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                            //          .valid
		.src_data            (cmd_mux_008_src_data),                             //          .data
		.src_channel         (cmd_mux_008_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                           //          .channel
		.sink0_data          (cmd_demux_src8_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                        //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset               (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                            //          .valid
		.src_data            (cmd_mux_009_src_data),                             //          .data
		.src_channel         (cmd_mux_009_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                           //          .channel
		.sink0_data          (cmd_demux_src9_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                        //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_cmd_mux_010 cmd_mux_010 (
		.clk                 (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset               (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                            //          .valid
		.src_data            (cmd_mux_010_src_data),                             //          .data
		.src_channel         (cmd_mux_010_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                          //          .channel
		.sink0_data          (cmd_demux_src10_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                    //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_cmd_mux_010 cmd_mux_011 (
		.clk                 (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset               (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                            //          .valid
		.src_data            (cmd_mux_011_src_data),                             //          .data
		.src_channel         (cmd_mux_011_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                          //          .channel
		.sink0_data          (cmd_demux_src11_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                    //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset               (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                            //          .valid
		.src_data            (cmd_mux_012_src_data),                             //          .data
		.src_channel         (cmd_mux_012_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                          //          .channel
		.sink0_data          (cmd_demux_src12_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)                       //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                             //      sink.ready
		.sink_channel       (router_002_src_channel),                           //          .channel
		.sink_data          (router_002_src_data),                              //          .data
		.sink_startofpacket (router_002_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_002_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_src0_data),                              //          .data
		.src0_channel       (rsp_demux_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                        //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                             //      sink.ready
		.sink_channel       (router_003_src_channel),                           //          .channel
		.sink_data          (router_003_src_data),                              //          .data
		.sink_startofpacket (router_003_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_003_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_001_src0_data),                          //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                    //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                             //      sink.ready
		.sink_channel       (router_004_src_channel),                           //          .channel
		.sink_data          (router_004_src_data),                              //          .data
		.sink_startofpacket (router_004_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_004_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_002_src0_data),                          //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                    //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                             //      sink.ready
		.sink_channel       (router_005_src_channel),                           //          .channel
		.sink_data          (router_005_src_data),                              //          .data
		.sink_startofpacket (router_005_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_005_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_003_src0_data),                          //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                    //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                             //      sink.ready
		.sink_channel       (router_006_src_channel),                           //          .channel
		.sink_data          (router_006_src_data),                              //          .data
		.sink_startofpacket (router_006_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_006_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_004_src0_data),                          //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                    //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                             //      sink.ready
		.sink_channel       (router_007_src_channel),                           //          .channel
		.sink_data          (router_007_src_data),                              //          .data
		.sink_startofpacket (router_007_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_007_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_005_src0_data),                          //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                    //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                             //      sink.ready
		.sink_channel       (router_008_src_channel),                           //          .channel
		.sink_data          (router_008_src_data),                              //          .data
		.sink_startofpacket (router_008_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_008_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_006_src0_data),                          //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                    //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                             //      sink.ready
		.sink_channel       (router_009_src_channel),                           //          .channel
		.sink_data          (router_009_src_data),                              //          .data
		.sink_startofpacket (router_009_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_009_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_007_src0_data),                          //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                    //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                             //      sink.ready
		.sink_channel       (router_010_src_channel),                           //          .channel
		.sink_data          (router_010_src_data),                              //          .data
		.sink_startofpacket (router_010_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_010_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_008_src0_data),                          //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                    //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                             //      sink.ready
		.sink_channel       (router_011_src_channel),                           //          .channel
		.sink_data          (router_011_src_data),                              //          .data
		.sink_startofpacket (router_011_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_011_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_009_src0_data),                          //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                    //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_cmd_demux_001 rsp_demux_010 (
		.clk                (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                             //      sink.ready
		.sink_channel       (router_012_src_channel),                           //          .channel
		.sink_data          (router_012_src_data),                              //          .data
		.sink_startofpacket (router_012_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_012_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_010_src0_data),                          //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_010_src1_data),                          //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)                    //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_cmd_demux_001 rsp_demux_011 (
		.clk                (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (sdram_s1_rsp_width_adapter_src_ready),             //      sink.ready
		.sink_channel       (sdram_s1_rsp_width_adapter_src_channel),           //          .channel
		.sink_data          (sdram_s1_rsp_width_adapter_src_data),              //          .data
		.sink_startofpacket (sdram_s1_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.sink_endofpacket   (sdram_s1_rsp_width_adapter_src_endofpacket),       //          .endofpacket
		.sink_valid         (sdram_s1_rsp_width_adapter_src_valid),             //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_011_src0_data),                          //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_011_src1_data),                          //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)                    //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset              (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                             //      sink.ready
		.sink_channel       (router_014_src_channel),                           //          .channel
		.sink_data          (router_014_src_data),                              //          .data
		.sink_startofpacket (router_014_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_014_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_012_src0_data),                          //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                    //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset                (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                //       src.ready
		.src_valid            (rsp_mux_src_valid),                                //          .valid
		.src_data             (rsp_mux_src_data),                                 //          .data
		.src_channel          (rsp_mux_src_channel),                              //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                             //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                             //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                           //          .channel
		.sink0_data           (rsp_demux_src0_data),                              //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                       //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                         //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                         //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                       //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                          //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                   //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                         //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                         //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                       //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                          //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                 //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                   //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                         //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                         //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                       //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                          //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                 //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                   //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                         //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                         //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                       //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                          //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                 //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                   //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                         //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                         //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                       //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                          //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                 //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                   //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                         //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                         //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                       //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                          //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                 //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                   //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                         //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                         //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                       //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                          //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                 //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                   //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                         //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                         //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                       //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                          //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                 //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                   //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                         //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                         //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                       //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                          //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                 //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                   //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                         //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                         //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                       //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                          //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                 //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                   //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                         //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                         //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                       //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                          //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                 //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                   //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                         //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                         //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                       //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                          //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                 //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket)                    //          .endofpacket
	);

	CST455_Midterm_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset               (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                            //          .valid
		.src_data            (rsp_mux_001_src_data),                             //          .data
		.src_channel         (rsp_mux_001_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_010_src1_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_010_src1_valid),                         //          .valid
		.sink0_channel       (rsp_demux_010_src1_channel),                       //          .channel
		.sink0_data          (rsp_demux_010_src1_data),                          //          .data
		.sink0_startofpacket (rsp_demux_010_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_010_src1_endofpacket),                   //          .endofpacket
		.sink1_ready         (rsp_demux_011_src1_ready),                         //     sink1.ready
		.sink1_valid         (rsp_demux_011_src1_valid),                         //          .valid
		.sink1_channel       (rsp_demux_011_src1_channel),                       //          .channel
		.sink1_data          (rsp_demux_011_src1_data),                          //          .data
		.sink1_startofpacket (rsp_demux_011_src1_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_011_src1_endofpacket)                    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (45),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (54),
		.IN_PKT_BYTE_CNT_L             (52),
		.IN_PKT_TRANS_COMPRESSED_READ  (46),
		.IN_PKT_TRANS_WRITE            (48),
		.IN_PKT_BURSTWRAP_H            (57),
		.IN_PKT_BURSTWRAP_L            (55),
		.IN_PKT_BURST_SIZE_H           (60),
		.IN_PKT_BURST_SIZE_L           (58),
		.IN_PKT_RESPONSE_STATUS_H      (84),
		.IN_PKT_RESPONSE_STATUS_L      (83),
		.IN_PKT_TRANS_EXCLUSIVE        (51),
		.IN_PKT_BURST_TYPE_H           (62),
		.IN_PKT_BURST_TYPE_L           (61),
		.IN_PKT_ORI_BURST_SIZE_L       (85),
		.IN_PKT_ORI_BURST_SIZE_H       (87),
		.IN_ST_DATA_W                  (88),
		.OUT_PKT_ADDR_H                (63),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (72),
		.OUT_PKT_BYTE_CNT_L            (70),
		.OUT_PKT_TRANS_COMPRESSED_READ (64),
		.OUT_PKT_BURST_SIZE_H          (78),
		.OUT_PKT_BURST_SIZE_L          (76),
		.OUT_PKT_RESPONSE_STATUS_H     (102),
		.OUT_PKT_RESPONSE_STATUS_L     (101),
		.OUT_PKT_TRANS_EXCLUSIVE       (69),
		.OUT_PKT_BURST_TYPE_H          (80),
		.OUT_PKT_BURST_TYPE_L          (79),
		.OUT_PKT_ORI_BURST_SIZE_L      (103),
		.OUT_PKT_ORI_BURST_SIZE_H      (105),
		.OUT_ST_DATA_W                 (106),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_rsp_width_adapter (
		.clk                  (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset                (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_013_src_valid),                             //      sink.valid
		.in_channel           (router_013_src_channel),                           //          .channel
		.in_startofpacket     (router_013_src_startofpacket),                     //          .startofpacket
		.in_endofpacket       (router_013_src_endofpacket),                       //          .endofpacket
		.in_ready             (router_013_src_ready),                             //          .ready
		.in_data              (router_013_src_data),                              //          .data
		.out_endofpacket      (sdram_s1_rsp_width_adapter_src_endofpacket),       //       src.endofpacket
		.out_data             (sdram_s1_rsp_width_adapter_src_data),              //          .data
		.out_channel          (sdram_s1_rsp_width_adapter_src_channel),           //          .channel
		.out_valid            (sdram_s1_rsp_width_adapter_src_valid),             //          .valid
		.out_ready            (sdram_s1_rsp_width_adapter_src_ready),             //          .ready
		.out_startofpacket    (sdram_s1_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.in_command_size_data (3'b000)                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (63),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (72),
		.IN_PKT_BYTE_CNT_L             (70),
		.IN_PKT_TRANS_COMPRESSED_READ  (64),
		.IN_PKT_TRANS_WRITE            (66),
		.IN_PKT_BURSTWRAP_H            (75),
		.IN_PKT_BURSTWRAP_L            (73),
		.IN_PKT_BURST_SIZE_H           (78),
		.IN_PKT_BURST_SIZE_L           (76),
		.IN_PKT_RESPONSE_STATUS_H      (102),
		.IN_PKT_RESPONSE_STATUS_L      (101),
		.IN_PKT_TRANS_EXCLUSIVE        (69),
		.IN_PKT_BURST_TYPE_H           (80),
		.IN_PKT_BURST_TYPE_L           (79),
		.IN_PKT_ORI_BURST_SIZE_L       (103),
		.IN_PKT_ORI_BURST_SIZE_H       (105),
		.IN_ST_DATA_W                  (106),
		.OUT_PKT_ADDR_H                (45),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (54),
		.OUT_PKT_BYTE_CNT_L            (52),
		.OUT_PKT_TRANS_COMPRESSED_READ (46),
		.OUT_PKT_BURST_SIZE_H          (60),
		.OUT_PKT_BURST_SIZE_L          (58),
		.OUT_PKT_RESPONSE_STATUS_H     (84),
		.OUT_PKT_RESPONSE_STATUS_L     (83),
		.OUT_PKT_TRANS_EXCLUSIVE       (51),
		.OUT_PKT_BURST_TYPE_H          (62),
		.OUT_PKT_BURST_TYPE_L          (61),
		.OUT_PKT_ORI_BURST_SIZE_L      (85),
		.OUT_PKT_ORI_BURST_SIZE_H      (87),
		.OUT_ST_DATA_W                 (88),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_cmd_width_adapter (
		.clk                  (CLOCKS_sys_clk_clk),                               //       clk.clk
		.reset                (CST455_Midterm_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_011_src_valid),                            //      sink.valid
		.in_channel           (cmd_mux_011_src_channel),                          //          .channel
		.in_startofpacket     (cmd_mux_011_src_startofpacket),                    //          .startofpacket
		.in_endofpacket       (cmd_mux_011_src_endofpacket),                      //          .endofpacket
		.in_ready             (cmd_mux_011_src_ready),                            //          .ready
		.in_data              (cmd_mux_011_src_data),                             //          .data
		.out_endofpacket      (sdram_s1_cmd_width_adapter_src_endofpacket),       //       src.endofpacket
		.out_data             (sdram_s1_cmd_width_adapter_src_data),              //          .data
		.out_channel          (sdram_s1_cmd_width_adapter_src_channel),           //          .channel
		.out_valid            (sdram_s1_cmd_width_adapter_src_valid),             //          .valid
		.out_ready            (sdram_s1_cmd_width_adapter_src_ready),             //          .ready
		.out_startofpacket    (sdram_s1_cmd_width_adapter_src_startofpacket),     //          .startofpacket
		.in_command_size_data (3'b000)                                            // (terminated)
	);

	CST455_Midterm_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (CLOCKS_sys_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (CST455_Midterm_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (debug_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (debug_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (debug_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                       //         .error
	);

	CST455_Midterm_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (CLOCKS_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (CST455_Midterm_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (leds_0_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (leds_0_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (leds_0_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                 //         .error
	);

	CST455_Midterm_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (CLOCKS_sys_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (CST455_Midterm_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (switches_0_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (switches_0_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (switches_0_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                     //         .error
	);

	CST455_Midterm_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (CLOCKS_sys_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (CST455_Midterm_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (pushbuttons_0_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (pushbuttons_0_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (pushbuttons_0_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                        //         .error
	);

	CST455_Midterm_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (CLOCKS_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (CST455_Midterm_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (sevensegdecoder_1_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sevensegdecoder_1_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sevensegdecoder_1_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                            //         .error
	);

	CST455_Midterm_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (CLOCKS_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (CST455_Midterm_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (sevensegdecoder_2_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sevensegdecoder_2_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sevensegdecoder_2_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                            //         .error
	);

	CST455_Midterm_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (CLOCKS_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (CST455_Midterm_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (sevensegdecoder_4_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sevensegdecoder_4_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sevensegdecoder_4_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                            //         .error
	);

	CST455_Midterm_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (CLOCKS_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (CST455_Midterm_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (sevensegdecoder_5_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sevensegdecoder_5_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sevensegdecoder_5_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                            //         .error
	);

	CST455_Midterm_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (CLOCKS_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (CST455_Midterm_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (sevensegdecoder_3_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sevensegdecoder_3_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sevensegdecoder_3_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                            //         .error
	);

	CST455_Midterm_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (CLOCKS_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (CST455_Midterm_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (sevensegdecoder_0_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sevensegdecoder_0_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sevensegdecoder_0_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                            //         .error
	);

	CST455_Midterm_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (CLOCKS_sys_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (CST455_Midterm_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (cst455_midterm_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (cst455_midterm_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (cst455_midterm_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                          //         .error
	);

	CST455_Midterm_mm_interconnect_0_avalon_st_adapter_011 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (CLOCKS_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (CST455_Midterm_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                 //         .error
	);

	CST455_Midterm_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (CLOCKS_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (CST455_Midterm_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sys_clk_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (sys_clk_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (sys_clk_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                 //         .error
	);

endmodule
