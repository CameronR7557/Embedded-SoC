
Lab03.elf:     file format elf32-littlenios2
Lab03.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x000006a4 memsz 0x000006a4 flags r-x
    LOAD off    0x000016c4 vaddr 0x000016c4 paddr 0x000017b8 align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x000008ac vaddr 0x000018ac paddr 0x000018ac align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  000017b8  2**0
                  CONTENTS
  2 .text         0000067c  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000028  0000169c  0000169c  0000169c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  000016c4  000017b8  000016c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000018ac  000018ac  000018ac  2**2
                  ALLOC, SMALL_DATA
  6 .SRAM         00000000  000018bc  000018bc  000017b8  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002c0  00000000  00000000  000017e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00002df2  00000000  00000000  00001aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001355  00000000  00000000  0000489a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00000ea2  00000000  00000000  00005bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000334  00000000  00000000  00006a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00000845  00000000  00000000  00006dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000040  00000000  00000000  00007610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000020  00000000  00000000  00007650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00000878  00000000  00000000  00007670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000107  00000000  00000000  00007ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000a9b  00000000  00000000  00007fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  00009b29  2**0
                  CONTENTS, READONLY
 20 .cpu          00000005  00000000  00000000  00009b2c  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00009b31  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00009b32  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000005  00000000  00000000  00009b33  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000005  00000000  00000000  00009b38  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000005  00000000  00000000  00009b3d  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000005  00000000  00000000  00009b42  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000038  00000000  00000000  00009b47  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00043e19  00000000  00000000  00009b7f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
0000169c l    d  .rodata	00000000 .rodata
000016c4 l    d  .rwdata	00000000 .rwdata
000018ac l    d  .bss	00000000 .bss
000018bc l    d  .SRAM	00000000 .SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
000016b0 l     O .rodata	00000010 CSWTCH.1
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000016c4 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00001318 g     F .text	0000002c alt_main
000010f0 g     F .text	00000080 _puts_r
000017b8 g       *ABS*	00000000 __flash_rwdata_start
00001490 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
000018ac g     O .bss	00000004 errno
000018b4 g     O .bss	00000004 alt_argv
000097a8 g       *ABS*	00000000 _gp
00001344 g     F .text	00000004 usleep
00001498 g     F .text	00000028 memcpy
00001170 g     F .text	00000010 puts
000015b4 g     F .text	00000064 .hidden __udivsi3
000017a8 g     O .rwdata	00000004 _global_impure_ptr
000018bc g       *ABS*	00000000 __bss_end
00001488 g     F .text	00000004 alt_dcache_flush_all
000017b8 g       *ABS*	00000000 __ram_rwdata_end
00001348 g     F .text	0000005c write
000016c4 g       *ABS*	00000000 __ram_rodata_end
000017b0 g     O .rwdata	00000004 DEBUG
00001618 g     F .text	0000005c .hidden __umodsi3
000018bc g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
000013c8 g     F .text	00000030 altera_avalon_jtag_uart_write
00001020 g     F .text	0000003c _start
000013c4 g     F .text	00000004 alt_sys_init
00001674 g     F .text	00000028 .hidden __mulsi3
000016c4 g       *ABS*	00000000 __ram_rwdata_start
0000169c g       *ABS*	00000000 __ram_rodata_start
000013f8 g     F .text	00000090 alt_busy_sleep
000018bc g       *ABS*	00000000 __alt_stack_base
0000119c g     F .text	000000a8 __sfvwrite_small_dev
000018ac g       *ABS*	00000000 __bss_start
0000108c g     F .text	00000064 main
000018b0 g     O .bss	00000004 alt_envp
000017b4 g     O .rwdata	00000004 alt_errno
0000105c g     F .text	00000030 displayValue
000014c0 g     F .text	00000080 .hidden __divsi3
0000169c g       *ABS*	00000000 __flash_rodata_start
000013a4 g     F .text	00000020 alt_irq_init
00001244 g     F .text	00000050 _write_r
000017ac g     O .rwdata	00000004 _impure_ptr
000018b8 g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
000017b8 g       *ABS*	00000000 _edata
000018bc g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
00001540 g     F .text	00000074 .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
00001180 g     F .text	0000001c strlen
00001000 g       *ABS*	00000000 __alt_mem_SRAM
0000148c g     F .text	00000004 alt_icache_flush_all
00001294 g     F .text	00000084 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a5ea14 	ori	gp,gp,38824
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	10862b14 	ori	r2,r2,6316

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c62f14 	ori	r3,r3,6332

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00012940 	call	1294 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00013180 	call	1318 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <alt_after_alt_main>

0000105c <displayValue>:
************************************************************************/
void displayValue(uint8_t val, uint16_t address_base)
{
	uint8_t segs = 0;			//Var to store 7-seg values

	switch(val)	//Decodes hex value to 7-seg display equivalent
    105c:	21003fcc 	andi	r4,r4,255
    1060:	20800428 	cmpgeui	r2,r4,16
    1064:	1000071e 	bne	r2,zero,1084 <displayValue+0x28>
    1068:	00800034 	movhi	r2,0
    106c:	2085883a 	add	r2,r4,r2
    1070:	1085ac03 	ldbu	r2,5808(r2)
	default:
		segs = 0b01111111;
		break;
	}

	IOWR_ALTERA_AVALON_PIO_DATA(address_base, segs); //Write value to segments
    1074:	297fffcc 	andi	r5,r5,65535
    1078:	10803fcc 	andi	r2,r2,255
    107c:	28800035 	stwio	r2,0(r5)
}
    1080:	f800283a 	ret
{
    1084:	00801fc4 	movi	r2,127
    1088:	003ffa06 	br	1074 <displayValue+0x18>

0000108c <main>:
{ 
    108c:	defffd04 	addi	sp,sp,-12
	printf("Hello from Nios II!\n");
    1090:	01000034 	movhi	r4,0
{ 
    1094:	dc400115 	stw	r17,4(sp)
	printf("Hello from Nios II!\n");
    1098:	2105a704 	addi	r4,r4,5788
		usleep(100000);
    109c:	044000b4 	movhi	r17,2
{ 
    10a0:	dfc00215 	stw	ra,8(sp)
    10a4:	dc000015 	stw	r16,0(sp)
		usleep(100000);
    10a8:	8c61a804 	addi	r17,r17,-31072
	printf("Hello from Nios II!\n");
    10ac:	00011700 	call	1170 <puts>
		sw_vals = IORD_ALTERA_AVALON_PIO_DATA(SW_BASE);
    10b0:	040c1837 	ldwio	r16,12384(zero)
		displayValue((sw_vals & 0x000F), DISPLAY0_BASE);
    10b4:	014c1004 	movi	r5,12352
    10b8:	810003cc 	andi	r4,r16,15
    10bc:	000105c0 	call	105c <displayValue>
		displayValue(((sw_vals >> 4) & 0x000F),DISPLAY1_BASE);
    10c0:	843fffcc 	andi	r16,r16,65535
    10c4:	8008d13a 	srli	r4,r16,4
    10c8:	014c0804 	movi	r5,12320
    10cc:	210003cc 	andi	r4,r4,15
    10d0:	000105c0 	call	105c <displayValue>
		displayValue(((sw_vals >> 8) & 0x0003),DISPLAY2_BASE);
    10d4:	8008d23a 	srli	r4,r16,8
    10d8:	014c0004 	movi	r5,12288
    10dc:	210000cc 	andi	r4,r4,3
    10e0:	000105c0 	call	105c <displayValue>
		usleep(100000);
    10e4:	8809883a 	mov	r4,r17
    10e8:	00013440 	call	1344 <usleep>
	while (1)
    10ec:	003ff006 	br	10b0 <main+0x24>

000010f0 <_puts_r>:
    10f0:	defffd04 	addi	sp,sp,-12
    10f4:	dc000015 	stw	r16,0(sp)
    10f8:	2021883a 	mov	r16,r4
    10fc:	2809883a 	mov	r4,r5
    1100:	dfc00215 	stw	ra,8(sp)
    1104:	dc400115 	stw	r17,4(sp)
    1108:	2823883a 	mov	r17,r5
    110c:	00011800 	call	1180 <strlen>
    1110:	81400217 	ldw	r5,8(r16)
    1114:	00c00034 	movhi	r3,0
    1118:	18c46704 	addi	r3,r3,4508
    111c:	28c00115 	stw	r3,4(r5)
    1120:	100f883a 	mov	r7,r2
    1124:	880d883a 	mov	r6,r17
    1128:	8009883a 	mov	r4,r16
    112c:	000119c0 	call	119c <__sfvwrite_small_dev>
    1130:	10ffffe0 	cmpeqi	r3,r2,-1
    1134:	1800091e 	bne	r3,zero,115c <_puts_r+0x6c>
    1138:	81400217 	ldw	r5,8(r16)
    113c:	01800034 	movhi	r6,0
    1140:	01c00044 	movi	r7,1
    1144:	28800117 	ldw	r2,4(r5)
    1148:	3185b004 	addi	r6,r6,5824
    114c:	8009883a 	mov	r4,r16
    1150:	103ee83a 	callr	r2
    1154:	10bfffe0 	cmpeqi	r2,r2,-1
    1158:	0085c83a 	sub	r2,zero,r2
    115c:	dfc00217 	ldw	ra,8(sp)
    1160:	dc400117 	ldw	r17,4(sp)
    1164:	dc000017 	ldw	r16,0(sp)
    1168:	dec00304 	addi	sp,sp,12
    116c:	f800283a 	ret

00001170 <puts>:
    1170:	00800034 	movhi	r2,0
    1174:	200b883a 	mov	r5,r4
    1178:	1105eb17 	ldw	r4,6060(r2)
    117c:	00010f01 	jmpi	10f0 <_puts_r>

00001180 <strlen>:
    1180:	2005883a 	mov	r2,r4
    1184:	10c00007 	ldb	r3,0(r2)
    1188:	1800021e 	bne	r3,zero,1194 <strlen+0x14>
    118c:	1105c83a 	sub	r2,r2,r4
    1190:	f800283a 	ret
    1194:	10800044 	addi	r2,r2,1
    1198:	003ffa06 	br	1184 <strlen+0x4>

0000119c <__sfvwrite_small_dev>:
    119c:	2880000b 	ldhu	r2,0(r5)
    11a0:	1080020c 	andi	r2,r2,8
    11a4:	10002526 	beq	r2,zero,123c <__sfvwrite_small_dev+0xa0>
    11a8:	2880008f 	ldh	r2,2(r5)
    11ac:	defffb04 	addi	sp,sp,-20
    11b0:	dcc00315 	stw	r19,12(sp)
    11b4:	dc800215 	stw	r18,8(sp)
    11b8:	dc400115 	stw	r17,4(sp)
    11bc:	dc000015 	stw	r16,0(sp)
    11c0:	dfc00415 	stw	ra,16(sp)
    11c4:	2027883a 	mov	r19,r4
    11c8:	2821883a 	mov	r16,r5
    11cc:	3025883a 	mov	r18,r6
    11d0:	3823883a 	mov	r17,r7
    11d4:	1000100e 	bge	r2,zero,1218 <__sfvwrite_small_dev+0x7c>
    11d8:	8080000b 	ldhu	r2,0(r16)
    11dc:	10801014 	ori	r2,r2,64
    11e0:	8080000d 	sth	r2,0(r16)
    11e4:	00bfffc4 	movi	r2,-1
    11e8:	00000d06 	br	1220 <__sfvwrite_small_dev+0x84>
    11ec:	88810050 	cmplti	r2,r17,1025
    11f0:	880f883a 	mov	r7,r17
    11f4:	1000011e 	bne	r2,zero,11fc <__sfvwrite_small_dev+0x60>
    11f8:	01c10004 	movi	r7,1024
    11fc:	8140008f 	ldh	r5,2(r16)
    1200:	900d883a 	mov	r6,r18
    1204:	9809883a 	mov	r4,r19
    1208:	00012440 	call	1244 <_write_r>
    120c:	00bff20e 	bge	zero,r2,11d8 <__sfvwrite_small_dev+0x3c>
    1210:	88a3c83a 	sub	r17,r17,r2
    1214:	90a5883a 	add	r18,r18,r2
    1218:	047ff416 	blt	zero,r17,11ec <__sfvwrite_small_dev+0x50>
    121c:	0005883a 	mov	r2,zero
    1220:	dfc00417 	ldw	ra,16(sp)
    1224:	dcc00317 	ldw	r19,12(sp)
    1228:	dc800217 	ldw	r18,8(sp)
    122c:	dc400117 	ldw	r17,4(sp)
    1230:	dc000017 	ldw	r16,0(sp)
    1234:	dec00504 	addi	sp,sp,20
    1238:	f800283a 	ret
    123c:	00bfffc4 	movi	r2,-1
    1240:	f800283a 	ret

00001244 <_write_r>:
    1244:	defffe04 	addi	sp,sp,-8
    1248:	dc000015 	stw	r16,0(sp)
    124c:	00800034 	movhi	r2,0
    1250:	2021883a 	mov	r16,r4
    1254:	2809883a 	mov	r4,r5
    1258:	300b883a 	mov	r5,r6
    125c:	380d883a 	mov	r6,r7
    1260:	dfc00115 	stw	ra,4(sp)
    1264:	10062b15 	stw	zero,6316(r2)
    1268:	00013480 	call	1348 <write>
    126c:	10ffffd8 	cmpnei	r3,r2,-1
    1270:	1800041e 	bne	r3,zero,1284 <_write_r+0x40>
    1274:	00c00034 	movhi	r3,0
    1278:	18c62b17 	ldw	r3,6316(r3)
    127c:	18000126 	beq	r3,zero,1284 <_write_r+0x40>
    1280:	80c00015 	stw	r3,0(r16)
    1284:	dfc00117 	ldw	ra,4(sp)
    1288:	dc000017 	ldw	r16,0(sp)
    128c:	dec00204 	addi	sp,sp,8
    1290:	f800283a 	ret

00001294 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1294:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1298:	01000034 	movhi	r4,0
    129c:	01400034 	movhi	r5,0
    12a0:	dfc00015 	stw	ra,0(sp)
    12a4:	2105b104 	addi	r4,r4,5828
    12a8:	2945ee04 	addi	r5,r5,6072
    12ac:	21400426 	beq	r4,r5,12c0 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
    12b0:	01800034 	movhi	r6,0
    12b4:	3185ee04 	addi	r6,r6,6072
    12b8:	310dc83a 	sub	r6,r6,r4
    12bc:	00014980 	call	1498 <memcpy>
  if (to != from)
    12c0:	01000034 	movhi	r4,0
    12c4:	01400034 	movhi	r5,0
    12c8:	21040804 	addi	r4,r4,4128
    12cc:	29440804 	addi	r5,r5,4128
    12d0:	21400426 	beq	r4,r5,12e4 <alt_load+0x50>
      *to++ = *from++;
    12d4:	01800034 	movhi	r6,0
    12d8:	31840804 	addi	r6,r6,4128
    12dc:	310dc83a 	sub	r6,r6,r4
    12e0:	00014980 	call	1498 <memcpy>
  if (to != from)
    12e4:	01000034 	movhi	r4,0
    12e8:	01400034 	movhi	r5,0
    12ec:	2105a704 	addi	r4,r4,5788
    12f0:	2945a704 	addi	r5,r5,5788
    12f4:	21400426 	beq	r4,r5,1308 <alt_load+0x74>
      *to++ = *from++;
    12f8:	01800034 	movhi	r6,0
    12fc:	3185b104 	addi	r6,r6,5828
    1300:	310dc83a 	sub	r6,r6,r4
    1304:	00014980 	call	1498 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1308:	00014880 	call	1488 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    130c:	dfc00017 	ldw	ra,0(sp)
    1310:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
    1314:	000148c1 	jmpi	148c <alt_icache_flush_all>

00001318 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1318:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    131c:	0009883a 	mov	r4,zero
{
    1320:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
    1324:	00013a40 	call	13a4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1328:	00013c40 	call	13c4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    132c:	d1a04217 	ldw	r6,-32504(gp)
    1330:	d1604317 	ldw	r5,-32500(gp)
    1334:	d1204417 	ldw	r4,-32496(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1338:	dfc00017 	ldw	ra,0(sp)
    133c:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
    1340:	000108c1 	jmpi	108c <main>

00001344 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    1344:	00013f81 	jmpi	13f8 <alt_busy_sleep>

00001348 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    1348:	213fffc4 	addi	r4,r4,-1
    134c:	210000a8 	cmpgeui	r4,r4,2
    1350:	2000041e 	bne	r4,zero,1364 <write+0x1c>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
    1354:	01000034 	movhi	r4,0
    1358:	000f883a 	mov	r7,zero
    135c:	2105ec04 	addi	r4,r4,6064
    1360:	00013c81 	jmpi	13c8 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    1364:	d0a00317 	ldw	r2,-32756(gp)
    1368:	10000926 	beq	r2,zero,1390 <write+0x48>
{
    136c:	deffff04 	addi	sp,sp,-4
    1370:	dfc00015 	stw	ra,0(sp)
    1374:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    1378:	00c01444 	movi	r3,81
    137c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    1380:	00bfffc4 	movi	r2,-1
    1384:	dfc00017 	ldw	ra,0(sp)
    1388:	dec00104 	addi	sp,sp,4
    138c:	f800283a 	ret
    1390:	d0a04104 	addi	r2,gp,-32508
        ALT_ERRNO = EBADFD;
    1394:	00c01444 	movi	r3,81
    1398:	10c00015 	stw	r3,0(r2)
}
    139c:	00bfffc4 	movi	r2,-1
    13a0:	f800283a 	ret

000013a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    13a4:	deffff04 	addi	sp,sp,-4
    13a8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( LAB03, Lab03);
    13ac:	00014900 	call	1490 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    13b0:	00800044 	movi	r2,1
    13b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    13b8:	dfc00017 	ldw	ra,0(sp)
    13bc:	dec00104 	addi	sp,sp,4
    13c0:	f800283a 	ret

000013c4 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( DEBUG, DEBUG);
}
    13c4:	f800283a 	ret

000013c8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    13c8:	20c00017 	ldw	r3,0(r4)
{
    13cc:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
    13d0:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    13d4:	01bfffd4 	movui	r6,65535
  while (ptr < end)
    13d8:	29000136 	bltu	r5,r4,13e0 <altera_avalon_jtag_uart_write+0x18>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    13dc:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    13e0:	19c00137 	ldwio	r7,4(r3)
    13e4:	31fffc2e 	bgeu	r6,r7,13d8 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    13e8:	29c00007 	ldb	r7,0(r5)
    13ec:	29400044 	addi	r5,r5,1
    13f0:	19c00035 	stwio	r7,0(r3)
    13f4:	003ff806 	br	13d8 <altera_avalon_jtag_uart_write+0x10>

000013f8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    13f8:	defffe04 	addi	sp,sp,-8
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    13fc:	008666b4 	movhi	r2,6554
{
    1400:	dc000015 	stw	r16,0(sp)
    1404:	dfc00115 	stw	ra,4(sp)
  if (big_loops)
    1408:	10a66604 	addi	r2,r2,-26216
{
    140c:	2021883a 	mov	r16,r4
  if (big_loops)
    1410:	1100182e 	bgeu	r2,r4,1474 <alt_busy_sleep+0x7c>
  big_loops = us / (INT_MAX/
    1414:	014666b4 	movhi	r5,6554
    1418:	29666644 	addi	r5,r5,-26215
    141c:	00015b40 	call	15b4 <__udivsi3>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1420:	00e00034 	movhi	r3,32768
  big_loops = us / (INT_MAX/
    1424:	1009883a 	mov	r4,r2
      __asm__ volatile (
    1428:	18ffffc4 	addi	r3,r3,-1
    for(i=0;i<big_loops;i++)
    142c:	0005883a 	mov	r2,zero
      __asm__ volatile (
    1430:	18ffffc4 	addi	r3,r3,-1
    1434:	183ffe1e 	bne	r3,zero,1430 <alt_busy_sleep+0x38>
    for(i=0;i<big_loops;i++)
    1438:	10800044 	addi	r2,r2,1
    143c:	113ffc16 	blt	r2,r4,1430 <alt_busy_sleep+0x38>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    1440:	017999b4 	movhi	r5,58982
    1444:	295999c4 	addi	r5,r5,26215
    1448:	00016740 	call	1674 <__mulsi3>
    144c:	1405883a 	add	r2,r2,r16
    1450:	100690ba 	slli	r3,r2,2
    1454:	1885883a 	add	r2,r3,r2
    __asm__ volatile (
    1458:	10bfffc4 	addi	r2,r2,-1
    145c:	103ffe1e 	bne	r2,zero,1458 <alt_busy_sleep+0x60>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    1460:	0005883a 	mov	r2,zero
    1464:	dfc00117 	ldw	ra,4(sp)
    1468:	dc000017 	ldw	r16,0(sp)
    146c:	dec00204 	addi	sp,sp,8
    1470:	f800283a 	ret
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    1474:	200490ba 	slli	r2,r4,2
    1478:	1105883a 	add	r2,r2,r4
    __asm__ volatile (
    147c:	10bfffc4 	addi	r2,r2,-1
    1480:	00bffe16 	blt	zero,r2,147c <alt_busy_sleep+0x84>
    1484:	003ff606 	br	1460 <alt_busy_sleep+0x68>

00001488 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1488:	f800283a 	ret

0000148c <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    148c:	f800283a 	ret

00001490 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1490:	000170fa 	wrctl	ienable,zero
}
    1494:	f800283a 	ret

00001498 <memcpy>:
    1498:	2005883a 	mov	r2,r4
    149c:	0007883a 	mov	r3,zero
    14a0:	30c0011e 	bne	r6,r3,14a8 <memcpy+0x10>
    14a4:	f800283a 	ret
    14a8:	28cf883a 	add	r7,r5,r3
    14ac:	39c00003 	ldbu	r7,0(r7)
    14b0:	10c9883a 	add	r4,r2,r3
    14b4:	18c00044 	addi	r3,r3,1
    14b8:	21c00005 	stb	r7,0(r4)
    14bc:	003ff806 	br	14a0 <memcpy+0x8>

000014c0 <__divsi3>:
    14c0:	20001a16 	blt	r4,zero,152c <__divsi3+0x6c>
    14c4:	000f883a 	mov	r7,zero
    14c8:	2800020e 	bge	r5,zero,14d4 <__divsi3+0x14>
    14cc:	014bc83a 	sub	r5,zero,r5
    14d0:	39c0005c 	xori	r7,r7,1
    14d4:	200d883a 	mov	r6,r4
    14d8:	00c00044 	movi	r3,1
    14dc:	2900092e 	bgeu	r5,r4,1504 <__divsi3+0x44>
    14e0:	00800804 	movi	r2,32
    14e4:	00c00044 	movi	r3,1
    14e8:	00000106 	br	14f0 <__divsi3+0x30>
    14ec:	10001226 	beq	r2,zero,1538 <__divsi3+0x78>
    14f0:	294b883a 	add	r5,r5,r5
    14f4:	10bfffc4 	addi	r2,r2,-1
    14f8:	18c7883a 	add	r3,r3,r3
    14fc:	293ffb36 	bltu	r5,r4,14ec <__divsi3+0x2c>
    1500:	18000d26 	beq	r3,zero,1538 <__divsi3+0x78>
    1504:	0005883a 	mov	r2,zero
    1508:	31400236 	bltu	r6,r5,1514 <__divsi3+0x54>
    150c:	314dc83a 	sub	r6,r6,r5
    1510:	10c4b03a 	or	r2,r2,r3
    1514:	1806d07a 	srli	r3,r3,1
    1518:	280ad07a 	srli	r5,r5,1
    151c:	183ffa1e 	bne	r3,zero,1508 <__divsi3+0x48>
    1520:	38000126 	beq	r7,zero,1528 <__divsi3+0x68>
    1524:	0085c83a 	sub	r2,zero,r2
    1528:	f800283a 	ret
    152c:	0109c83a 	sub	r4,zero,r4
    1530:	01c00044 	movi	r7,1
    1534:	003fe406 	br	14c8 <__divsi3+0x8>
    1538:	0005883a 	mov	r2,zero
    153c:	003ff806 	br	1520 <__divsi3+0x60>

00001540 <__modsi3>:
    1540:	20001716 	blt	r4,zero,15a0 <__modsi3+0x60>
    1544:	000f883a 	mov	r7,zero
    1548:	2005883a 	mov	r2,r4
    154c:	2800010e 	bge	r5,zero,1554 <__modsi3+0x14>
    1550:	014bc83a 	sub	r5,zero,r5
    1554:	00c00044 	movi	r3,1
    1558:	2900092e 	bgeu	r5,r4,1580 <__modsi3+0x40>
    155c:	01800804 	movi	r6,32
    1560:	00c00044 	movi	r3,1
    1564:	00000106 	br	156c <__modsi3+0x2c>
    1568:	30001026 	beq	r6,zero,15ac <__modsi3+0x6c>
    156c:	294b883a 	add	r5,r5,r5
    1570:	31bfffc4 	addi	r6,r6,-1
    1574:	18c7883a 	add	r3,r3,r3
    1578:	293ffb36 	bltu	r5,r4,1568 <__modsi3+0x28>
    157c:	18000b26 	beq	r3,zero,15ac <__modsi3+0x6c>
    1580:	1806d07a 	srli	r3,r3,1
    1584:	11400136 	bltu	r2,r5,158c <__modsi3+0x4c>
    1588:	1145c83a 	sub	r2,r2,r5
    158c:	280ad07a 	srli	r5,r5,1
    1590:	183ffb1e 	bne	r3,zero,1580 <__modsi3+0x40>
    1594:	38000126 	beq	r7,zero,159c <__modsi3+0x5c>
    1598:	0085c83a 	sub	r2,zero,r2
    159c:	f800283a 	ret
    15a0:	0109c83a 	sub	r4,zero,r4
    15a4:	01c00044 	movi	r7,1
    15a8:	003fe706 	br	1548 <__modsi3+0x8>
    15ac:	2005883a 	mov	r2,r4
    15b0:	003ff806 	br	1594 <__modsi3+0x54>

000015b4 <__udivsi3>:
    15b4:	200d883a 	mov	r6,r4
    15b8:	2900152e 	bgeu	r5,r4,1610 <__udivsi3+0x5c>
    15bc:	28001416 	blt	r5,zero,1610 <__udivsi3+0x5c>
    15c0:	00800804 	movi	r2,32
    15c4:	00c00044 	movi	r3,1
    15c8:	00000206 	br	15d4 <__udivsi3+0x20>
    15cc:	10000e26 	beq	r2,zero,1608 <__udivsi3+0x54>
    15d0:	28000416 	blt	r5,zero,15e4 <__udivsi3+0x30>
    15d4:	294b883a 	add	r5,r5,r5
    15d8:	10bfffc4 	addi	r2,r2,-1
    15dc:	18c7883a 	add	r3,r3,r3
    15e0:	293ffa36 	bltu	r5,r4,15cc <__udivsi3+0x18>
    15e4:	18000826 	beq	r3,zero,1608 <__udivsi3+0x54>
    15e8:	0005883a 	mov	r2,zero
    15ec:	31400236 	bltu	r6,r5,15f8 <__udivsi3+0x44>
    15f0:	314dc83a 	sub	r6,r6,r5
    15f4:	10c4b03a 	or	r2,r2,r3
    15f8:	1806d07a 	srli	r3,r3,1
    15fc:	280ad07a 	srli	r5,r5,1
    1600:	183ffa1e 	bne	r3,zero,15ec <__udivsi3+0x38>
    1604:	f800283a 	ret
    1608:	0005883a 	mov	r2,zero
    160c:	f800283a 	ret
    1610:	00c00044 	movi	r3,1
    1614:	003ff406 	br	15e8 <__udivsi3+0x34>

00001618 <__umodsi3>:
    1618:	2005883a 	mov	r2,r4
    161c:	2900132e 	bgeu	r5,r4,166c <__umodsi3+0x54>
    1620:	28001216 	blt	r5,zero,166c <__umodsi3+0x54>
    1624:	01800804 	movi	r6,32
    1628:	00c00044 	movi	r3,1
    162c:	00000206 	br	1638 <__umodsi3+0x20>
    1630:	30000c26 	beq	r6,zero,1664 <__umodsi3+0x4c>
    1634:	28000416 	blt	r5,zero,1648 <__umodsi3+0x30>
    1638:	294b883a 	add	r5,r5,r5
    163c:	31bfffc4 	addi	r6,r6,-1
    1640:	18c7883a 	add	r3,r3,r3
    1644:	293ffa36 	bltu	r5,r4,1630 <__umodsi3+0x18>
    1648:	18000626 	beq	r3,zero,1664 <__umodsi3+0x4c>
    164c:	1806d07a 	srli	r3,r3,1
    1650:	11400136 	bltu	r2,r5,1658 <__umodsi3+0x40>
    1654:	1145c83a 	sub	r2,r2,r5
    1658:	280ad07a 	srli	r5,r5,1
    165c:	183ffb1e 	bne	r3,zero,164c <__umodsi3+0x34>
    1660:	f800283a 	ret
    1664:	2005883a 	mov	r2,r4
    1668:	f800283a 	ret
    166c:	00c00044 	movi	r3,1
    1670:	003ff606 	br	164c <__umodsi3+0x34>

00001674 <__mulsi3>:
    1674:	0005883a 	mov	r2,zero
    1678:	20000726 	beq	r4,zero,1698 <__mulsi3+0x24>
    167c:	20c0004c 	andi	r3,r4,1
    1680:	2008d07a 	srli	r4,r4,1
    1684:	18000126 	beq	r3,zero,168c <__mulsi3+0x18>
    1688:	1145883a 	add	r2,r2,r5
    168c:	294b883a 	add	r5,r5,r5
    1690:	203ffa1e 	bne	r4,zero,167c <__mulsi3+0x8>
    1694:	f800283a 	ret
    1698:	f800283a 	ret
