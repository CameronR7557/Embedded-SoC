#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'Lab06_HPS' in
 * file '../Lab06_HPS.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following master:
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'HEX5', class 'altera_avalon_pio'
 * The macros are prefixed with 'HEX5_'.
 * The prefix is the slave descriptor.
 */
#define HEX5_COMPONENT_TYPE altera_avalon_pio
#define HEX5_COMPONENT_NAME HEX5
#define HEX5_BASE 0x0
#define HEX5_SPAN 16
#define HEX5_END 0xf
#define HEX5_BIT_CLEARING_EDGE_REGISTER 0
#define HEX5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HEX5_CAPTURE 0
#define HEX5_DATA_WIDTH 7
#define HEX5_DO_TEST_BENCH_WIRING 0
#define HEX5_DRIVEN_SIM_VALUE 0
#define HEX5_EDGE_TYPE NONE
#define HEX5_FREQ 50000000
#define HEX5_HAS_IN 0
#define HEX5_HAS_OUT 1
#define HEX5_HAS_TRI 0
#define HEX5_IRQ_TYPE NONE
#define HEX5_RESET_VALUE 127

/*
 * Macros for device 'HEX4', class 'altera_avalon_pio'
 * The macros are prefixed with 'HEX4_'.
 * The prefix is the slave descriptor.
 */
#define HEX4_COMPONENT_TYPE altera_avalon_pio
#define HEX4_COMPONENT_NAME HEX4
#define HEX4_BASE 0x10
#define HEX4_SPAN 16
#define HEX4_END 0x1f
#define HEX4_BIT_CLEARING_EDGE_REGISTER 0
#define HEX4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HEX4_CAPTURE 0
#define HEX4_DATA_WIDTH 7
#define HEX4_DO_TEST_BENCH_WIRING 0
#define HEX4_DRIVEN_SIM_VALUE 0
#define HEX4_EDGE_TYPE NONE
#define HEX4_FREQ 50000000
#define HEX4_HAS_IN 0
#define HEX4_HAS_OUT 1
#define HEX4_HAS_TRI 0
#define HEX4_IRQ_TYPE NONE
#define HEX4_RESET_VALUE 127

/*
 * Macros for device 'HEX3', class 'altera_avalon_pio'
 * The macros are prefixed with 'HEX3_'.
 * The prefix is the slave descriptor.
 */
#define HEX3_COMPONENT_TYPE altera_avalon_pio
#define HEX3_COMPONENT_NAME HEX3
#define HEX3_BASE 0x20
#define HEX3_SPAN 16
#define HEX3_END 0x2f
#define HEX3_BIT_CLEARING_EDGE_REGISTER 0
#define HEX3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HEX3_CAPTURE 0
#define HEX3_DATA_WIDTH 7
#define HEX3_DO_TEST_BENCH_WIRING 0
#define HEX3_DRIVEN_SIM_VALUE 0
#define HEX3_EDGE_TYPE NONE
#define HEX3_FREQ 50000000
#define HEX3_HAS_IN 0
#define HEX3_HAS_OUT 1
#define HEX3_HAS_TRI 0
#define HEX3_IRQ_TYPE NONE
#define HEX3_RESET_VALUE 127

/*
 * Macros for device 'HEX1', class 'altera_avalon_pio'
 * The macros are prefixed with 'HEX1_'.
 * The prefix is the slave descriptor.
 */
#define HEX1_COMPONENT_TYPE altera_avalon_pio
#define HEX1_COMPONENT_NAME HEX1
#define HEX1_BASE 0x30
#define HEX1_SPAN 16
#define HEX1_END 0x3f
#define HEX1_BIT_CLEARING_EDGE_REGISTER 0
#define HEX1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HEX1_CAPTURE 0
#define HEX1_DATA_WIDTH 7
#define HEX1_DO_TEST_BENCH_WIRING 0
#define HEX1_DRIVEN_SIM_VALUE 0
#define HEX1_EDGE_TYPE NONE
#define HEX1_FREQ 50000000
#define HEX1_HAS_IN 0
#define HEX1_HAS_OUT 1
#define HEX1_HAS_TRI 0
#define HEX1_IRQ_TYPE NONE
#define HEX1_RESET_VALUE 127

/*
 * Macros for device 'HEX2', class 'altera_avalon_pio'
 * The macros are prefixed with 'HEX2_'.
 * The prefix is the slave descriptor.
 */
#define HEX2_COMPONENT_TYPE altera_avalon_pio
#define HEX2_COMPONENT_NAME HEX2
#define HEX2_BASE 0x40
#define HEX2_SPAN 16
#define HEX2_END 0x4f
#define HEX2_BIT_CLEARING_EDGE_REGISTER 0
#define HEX2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HEX2_CAPTURE 0
#define HEX2_DATA_WIDTH 7
#define HEX2_DO_TEST_BENCH_WIRING 0
#define HEX2_DRIVEN_SIM_VALUE 0
#define HEX2_EDGE_TYPE NONE
#define HEX2_FREQ 50000000
#define HEX2_HAS_IN 0
#define HEX2_HAS_OUT 1
#define HEX2_HAS_TRI 0
#define HEX2_IRQ_TYPE NONE
#define HEX2_RESET_VALUE 127

/*
 * Macros for device 'HEX0', class 'altera_avalon_pio'
 * The macros are prefixed with 'HEX0_'.
 * The prefix is the slave descriptor.
 */
#define HEX0_COMPONENT_TYPE altera_avalon_pio
#define HEX0_COMPONENT_NAME HEX0
#define HEX0_BASE 0x50
#define HEX0_SPAN 16
#define HEX0_END 0x5f
#define HEX0_BIT_CLEARING_EDGE_REGISTER 0
#define HEX0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HEX0_CAPTURE 0
#define HEX0_DATA_WIDTH 7
#define HEX0_DO_TEST_BENCH_WIRING 0
#define HEX0_DRIVEN_SIM_VALUE 0
#define HEX0_EDGE_TYPE NONE
#define HEX0_FREQ 50000000
#define HEX0_HAS_IN 0
#define HEX0_HAS_OUT 1
#define HEX0_HAS_TRI 0
#define HEX0_IRQ_TYPE NONE
#define HEX0_RESET_VALUE 127

/*
 * Macros for device 'Switches', class 'altera_avalon_pio'
 * The macros are prefixed with 'SWITCHES_'.
 * The prefix is the slave descriptor.
 */
#define SWITCHES_COMPONENT_TYPE altera_avalon_pio
#define SWITCHES_COMPONENT_NAME Switches
#define SWITCHES_BASE 0x60
#define SWITCHES_SPAN 16
#define SWITCHES_END 0x6f
#define SWITCHES_BIT_CLEARING_EDGE_REGISTER 0
#define SWITCHES_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SWITCHES_CAPTURE 0
#define SWITCHES_DATA_WIDTH 10
#define SWITCHES_DO_TEST_BENCH_WIRING 0
#define SWITCHES_DRIVEN_SIM_VALUE 0
#define SWITCHES_EDGE_TYPE NONE
#define SWITCHES_FREQ 50000000
#define SWITCHES_HAS_IN 1
#define SWITCHES_HAS_OUT 0
#define SWITCHES_HAS_TRI 0
#define SWITCHES_IRQ_TYPE NONE
#define SWITCHES_RESET_VALUE 0

/*
 * Macros for device 'LEDs', class 'altera_avalon_pio'
 * The macros are prefixed with 'LEDS_'.
 * The prefix is the slave descriptor.
 */
#define LEDS_COMPONENT_TYPE altera_avalon_pio
#define LEDS_COMPONENT_NAME LEDs
#define LEDS_BASE 0x70
#define LEDS_SPAN 16
#define LEDS_END 0x7f
#define LEDS_BIT_CLEARING_EDGE_REGISTER 0
#define LEDS_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LEDS_CAPTURE 0
#define LEDS_DATA_WIDTH 10
#define LEDS_DO_TEST_BENCH_WIRING 0
#define LEDS_DRIVEN_SIM_VALUE 0
#define LEDS_EDGE_TYPE NONE
#define LEDS_FREQ 50000000
#define LEDS_HAS_IN 0
#define LEDS_HAS_OUT 1
#define LEDS_HAS_TRI 0
#define LEDS_IRQ_TYPE NONE
#define LEDS_RESET_VALUE 0


#endif /* _ALTERA_HPS_0_H_ */
